const { DOMElement } = require("ui/dom/domelement.js")
const { ColorPicker } = require("ui/popup/colorpicker.js")
const { ScrollArea } = require("ui/dom/scroll_area.js")
const { TextInput } = require("ui/dom/text_input.js")
const { Button } = require("ui/dom/button.js")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { ClusteredListView } = require('ui/listview/cluster')
const { TextRenderer } = require('ui/listview/renderer')


class TagListView extends ClusteredListView {
    constructor(body, scroller) {
        super(body, scroller)

        this.setupColumnRenderers()
        this._objectid_to_row_id = {}
        // this.forward_content_changed = async (q) => {
        //     await this.updateContents(q)
        // }

        // this.forward_object_changed = async (q) => {
        //     await this.updateElement(q)
        // }

        this.model = []
    }

    convert_tag(tag_element) {
        return {
            id: tag_element._id,
            name: tag_element.name,
            color: tag_element.color
        }
    }

    setupColumnRenderers() {
        this.addColumnRenderer({
            _config: {}, 
            render: (row, col, tag) => {
                return `<td style="width:25px; text-align:center">
                    <button id='${this._viewId}-color-${tag.id}' class="main-list color-chooser show-color-picker" style="background-color:${tag.color}"></button>
                </td>`
        }})

        this.addColumnRenderer(new TextRenderer({
            width: "250px",
            editTag: "name",
            color: (obj) => {return "rgb(28,28,28)"},
            text: (obj) => {return obj.name}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "50px",
            textAlign: "right",
            id: (rowId, columnId) => {
                return `${this._viewId}-edit-${rowId}`
            },
            color: (obj) => {return "rgb(100,100,100)"},
            text: (obj) => {return `<i class="fa fa-edit"></i>`}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "25px",
            textAlign:"center",
            id: (rowId, columnId) => {
                return `${this._viewId}-remove-${rowId}`
            },
            color: (obj) => {return "rgb(158,28,28)"},
            text: (obj) => {return `<i class="fa fa-trash"></i>`}
        }))
    }

    checkNameAvailability(newName) {
        return true
    }

    async handleEditKeypress(e) {
        let new_name = this.editValues['name'].value
        if ((new_name == this.oldName) || (await this.checkNameAvailability(new_name))) {
            this.editValues['name'].style.color = null
        } else {
            this.editValues['name'].style.color = "#dd0000"
        }
        e.preventDefault()
    }

    beginEdit(id) {
        let rowId = super.beginEdit(id)
        this.editId = this._elements.getElementById(rowId).id
        this.oldName = this._elements.getElementById(rowId).name
    }

    async saveEdit() {
        let values = super.saveEdit()
        this.dispatch("tag-name-edited", {
            id: this.editId,
            name: values.name
        })
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.closest("td").id
        let rating_regex = new RegExp(`${this._viewId}-edit-([_a-zA-Z0-9]+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            this.beginEdit(tableRow.id)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-remove-([_a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("row-remove-clicked", trackObject.id)
            e.preventDefault()
            return;
        }
    }

    compare_playlists(a, b) {
        if (!a.name) { return -1 }
        if (!b.name) { return 1 }
        let x = a.name.toLowerCase();
        let y = b.name.toLowerCase();
        if (x < y) { return -1; }
        if (x > y) { return 1; }
        return 0;        
    }    

    setList(list_elements) {
        this.model = list_elements
        if (list_elements == undefined) {
            list_elements = []
        }

        list_elements.sort(this.compare_playlists) 

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    updateElement(playlistObject) {
        let element = this.convert_tag(playlistObject)
        let rowId = this._objectid_to_row_id[element.id]
        super.updateElement(rowId, element)
        let row = this._row_elements.getElementById(rowId)
        if (row) {
            row.innerHTML = this.renderRow(rowId, element)
        }
    }
}




class TagEditDialog extends Dialog {
    constructor(config) {
        super()
        this.setTitle("Edit tags")
        this.setStyle({width:'400px', height:"500px"})

        this._tagsList = []
        this._tagObjects = {}
        this._tagsToRemove = {}
        this._tagsToAdd = {}
        this._tagsToUpdate = {}

        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let text = new DOMElement("div")
        text.setStyle({
            textAlign: "justify",
            margin: "20px",
            color:"rgb(30,30,30)"
        })
        text.domElement.innerHTML = "Edit, add or remove tags.  Deleting a tag will remove it from all tracks it was assigned to."

        let newTagColor = null
        let newTagColorInput = new Button()
        newTagColorInput.on("click", () => {
            let colorPicker = new ColorPicker(newTagColorInput.domElement, {
                cancel: () => {
                    colorPicker.close()
                },
                chooseColor: (color) => {
                    newTagColor = color
                    newTagColorInput.domElement.style.backgroundColor = newTagColor
                    colorPicker.close()
                }                    
            })
            colorPicker.open(newTagColorInput.domElement)
        })
        let newTagNameInput = new TextInput()
        let addNewTagButton = new Button()
        addNewTagButton.setText("Create...")
        addNewTagButton.on("click", () => {
            if (newTagNameInput.domElement.value != "") {
                let newId = this._id()
                let newTag = {
                    _id: newId,
                    color: newTagColor,
                    name: newTagNameInput.domElement.value,
                }
                this._tagsToAdd[newId] = newTag
                // this._tagsObje[newId] = newTag
                this._tagsList.push(newTag)
                this._listview.setList(this._tagsList)
                newTagColor = null
                newTagNameInput.domElement.value = ""
                newTagColorInput.domElement.style.backgroundColor = newTagColor                    
            }
        })

        let newTagInput = new BoxLayout('horizontal')
        newTagInput.append(newTagColorInput, false, true, 25)
        newTagInput.append(newTagNameInput, true, true)
        newTagInput.append(addNewTagButton, false, true, 70)

        let save_button = new ConfirmButton()
        save_button.setText("Save")
        save_button.on("click", () => {
            console.log(this._tagsToAdd)
            console.log(this._tagsToRemove)
            console.log(this._tagsToRemove)
            this.close()
        })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)
        

        let tagListScroller = new ScrollArea()
        tagListScroller.setStyle({
            overflow: null,
            overflowY: "auto"
        })
        let tagListTable = new DOMElement("table")
        tagListTable.setStyle({})
        let tagListBody = new DOMElement('tbody')
        tagListTable.appendChild(tagListBody)
        this._listview = new TagListView(tagListBody.domElement, tagListScroller.domElement)
        tagListScroller.appendChild(tagListTable)

        this._listview.on("tag-name-edited", (newValues) => {
            // console.log(newValues, this._tagsToAdd)
            if (this._tagsToUpdate[newValues.id]) {
                this._tagsToUpdate[newValues.id].name = newValues.name
            } else if (this._tagObjects[newValues.id]){
                this._tagsToUpdate[newValues.id] = {
                    name: newValues.name
                }
            } else if (this._tagsToAdd[newValues.id]){
                this._tagsToAdd[newValues.id].name = newValues.name
            } 
        })


        this.layout.append(text, false, false)
        this.layout.append(newTagInput, false, true, 30)
        this.layout.append(tagListScroller, true, true)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])

        
        
    }

    async init() {
        this._tagsList = Object.values(await MDB.tags.getAllObjects())
        console.log(this._tagsList)
        this._listview.setList(this._tagsList)
    }

    async open() {
        super.open()
    }
}

module.exports = {
    TagEditDialog: TagEditDialog
}