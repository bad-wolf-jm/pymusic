const {EventDispatcher} = require("notify/event_dispatcher.js")

class PydjayAudioContext extends EventDispatcher{
    constructor() {
        super()
        this.audio_ctx =  new AudioContext()
        this.destination = this.audio_ctx.createMediaStreamDestination()
        //this.audio_ctx.destination.channelCount = this.audio_ctx.destination.maxChannelCount
        //this.audio_ctx.destination.channelInterpretation = "discrete"
        //this.createAnalyzer()
        //this.createSplitter()
        //this.createMerger()
        //this.createGainControls()
        this.time_callback = null
        this.time_monitor = this.audio_ctx.createScriptProcessor(256, 1, 1)
        this.time_monitor.onaudioprocess = () => {
            this.dispatch("timestamp", this.audio_ctx.currentTime)
        }
        //this.merger.connect(
        this.time_monitor.connect(this.destination)
        //this.merger.connect(this.analyzer).connect(this.destination)
        this.source = null;

        this.outputs = {}

        //#this.audio_output = new Audio()
        //#this.audio_output.src = URL.createObjectURL(this.destination.stream);
        //this.audio_output.play();
    }

    // createAnalyzer() {
    //     this.analyzer = this.audio_ctx.createAnalyser()
    // }

    // createSplitter() {
    //     this.splitter = this.audio_ctx.createChannelSplitter(this.audio_ctx.destination.maxChannelCount)
    //     this.splitter.channelInterpretation = "discrete"
    // }

    // createMerger() {
    //     this.merger = this.audio_ctx.createChannelMerger(this.audio_ctx.destination.maxChannelCount)
    //     this.merger.channelInterpretation = "discrete"
    // }

    // createGainControls() {
    //     this.gain_controls = []
    //     let i=0
    //     for (i=0; i < this.audio_ctx.destination.maxChannelCount; i++) {
    //         let g = this.audio_ctx.createGain()
    //         g.connect(this.merger, 0, i)
    //         this.gain_controls.push(g)
    //     }
    // }

    connectOutputs(channel_layout) {
        // let channel_names = Object.keys(channel_layout)
        // this.splitter.disconnect()
        // for (let i=0; i<channel_names.length; i++) {
        //     let channel_data = channel_layout[channel_names[i]]
        //     this.splitter.connect(this.gain_controls[channel_data.left], 0, 0)
        //     this.splitter.connect(this.gain_controls[channel_data.right], 1, 0)
        // }
    }

    addOutput(name) {
        if (this.outputs[name] == undefined) {
            this.outputs[name] = new Audio()
            this.outputs[name].mediaGroup = "FOO"
            this.outputs[name].src = URL.createObjectURL(this.destination.stream);
            //return.this.outputs[name].play();
        }
    }
}

module.exports = {
    PydjayAudioContext:PydjayAudioContext
}