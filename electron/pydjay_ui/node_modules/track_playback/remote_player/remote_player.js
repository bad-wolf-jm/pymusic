
// const {AudioFilePlayer} = require("track_playback/track_player")
const {EventDispatcher} = require("notify/event_dispatcher.js")
const { BrowserWindow } = require("electron").remote
const { ipcRenderer } = require("electron")


class RemoteTrackPlayer extends EventDispatcher {
    constructor() {
        super()
        this._current_track = undefined
        this.remote = new BrowserWindow({width: 600, height: 400, show: true});
        this.response_prefix = this._id()
        this.remote.webContents.once("did-finish-load", () => {
            const currentWindow = require('electron').remote.getCurrentWindow();
            this.remote.webContents.send('owner-class', this.response_prefix, currentWindow.id)
            this.remote.show()
            this.remote.openDevTools()
        })
        this.remote.loadURL('file://' + __dirname + '/window/index.html');

        ipcRenderer.on(`${this.response_prefix}end-of-stream`, (e, a) => {
            this.dispatch("end-of-stream")
        })

        ipcRenderer.on(`${this.response_prefix}playback-stopped`, (e, a) => {
            this.dispatch("playback-stopped")
        })

        ipcRenderer.on(`${this.response_prefix}playback-paused`, (e, a) => {
            this.dispatch("playback-paused")
        })

        ipcRenderer.on(`${this.response_prefix}playback-started`, (e, a) => {
            this.dispatch("playback-started")
        })

        ipcRenderer.on(`${this.response_prefix}stream-position`, (e, a) => {
            this.dispatch("stream-position", a)
        })

        this.on("end-of-stream", () => {
            if (this._current_track != undefined) {
                this._current_track.end_time = new Date()
                this._current_track.status = "ended"
                this.dispatch("track-finished", this._current_track)
                this._current_track = undefined    
            }
        })
    }

    _id() {
        return '_' + Math.random().toString(36).substr(2, 9);
    };


    reset_audio_context(channel_configuration) {
        this.remote.webContents.send("reset-audio-system")
        this.dispatch("audio-system-reset")
    }

    outputChannelCount() {
        return this.audio_context.audio_ctx.destination.maxChannelCount
    }

    play(track, stream_start, stream_end) {
        this._current_track = {
            track_object: track,
            start_time: new Date(),
            end_time: undefined,
            status: undefined
        }
        this.remote.webContents.send("play", {
            track: track,
            stream_start: stream_start,
            stream_end: stream_end
        })
    }

    stop() {
        if (this._current_track != undefined) {
            this._current_track.end_time = new Date()
            this._current_track.status = "stopped"
            this.dispatch("track-stopped", this._current_track)
            this._current_track = undefined
        }
        this.remote.webContents.send("stop")
    }

}

module.exports = {
    RemoteTrackPlayer: RemoteTrackPlayer
}