const {PydjayAudioFilePlayer} = require("webaudio/audio_player_file.js")

class AudioTrackPlayer extends PydjayAudioFilePlayer {
    constructor() {
        super()
        this._current_track = undefined
        this.on('end-of-stream', () => {
            if (this._current_track != undefined) {
                this._current_track.time_end = new Date()
                this._current_track.status = "ended"
                this.dispatch("track-finished", this._current_track)
                this._current_track = undefined    
            }
        })
    }

    reset_audio_context(channel_configuration) {
        let url = undefined,
            time = undefined,
            end_time = undefined;

        if (this.source != undefined) {
            time = this.source.currentTime * 1000
            end_time = this.stream_end
            url = this.url
            this.stop()
        }

        super.reset_audio_context()
        this.connectOutputs(channel_configuration)
        if (url != undefined) {
            super.play(url, time, end_time)
        }

        this.dispatch("audio-system-reset")
    }

    outputChannelCount() {
        return this.audio_context.audio_ctx.destination.maxChannelCount
    }

    play(track, stream_start, stream_end) {
        console.log(track)
        let file_name = track.path//  path.join(track.music_root, track.file_name);

        if (stream_start == undefined) {
            stream_start = track.bounds.start
            stream_end = track.bounds.end
        } else if (stream_end == undefined) {
            stream_end = track.bounds.end
            if (stream_start < 0) {
                stream_start = stream_end + stream_start;
            }
        }
        // console.log(this._current_track)
        super.play(file_name, stream_start / 1000000, stream_end / 1000000)
        this._current_track = {
            track_object: track,
            time_start: new Date(),
            time_end: undefined,
            status: undefined
        }
        this.dispatch("track-started", this._current_track)
    }

    stop() {
        if (this._current_track != undefined) {
            this._current_track.time_end = new Date()
            this._current_track.status = "stopped"
            this.dispatch("track-stopped", this._current_track)
            this._current_track = undefined
        }
        super.stop()
    }
}

module.exports = {
    AudioTrackPlayer: AudioTrackPlayer
}
