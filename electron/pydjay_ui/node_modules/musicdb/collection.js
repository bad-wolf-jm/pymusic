const { EventDispatcher } = require("event_dispatcher")
const { Datastore } = require("nedb-async-await")


class CollectionModel extends EventDispatcher {
    constructor(filename) {
        super()
        this.d = new Datastore({
            filename: filename, 
            autoload: true,
            timestampData: true})
    }

    getAllObjects() {
        return this.getObjectsByIds()
    }

    async getObjectsByIds(id_array) {
        let query = (id_array == undefined) ? {} : {"_id": {"$in": id_array}}
        let objects = await this.d.find(query)
        let result = {}
        objects.forEach((o) => {result[o._id] = o})
        //console.log(result)
        return result
    }

    async getObjectById(id) {
        return (await this.getObjectsByIds([id]))[id]
    }

    async length() {
        return await this.d.count({})        
    }

    async setData(object, new_data) {
        let [num, modified] = await this.d.update({_id: object._id},  {$set: new_data}, {returnUpdatedDocs: true})
        if (num > 0) {
            this.dispatch("object-changed". modified)
        }
        return modified
    }


}


class TrackCollectionModel extends CollectionModel {
    constructor(filename) {
        super(filename)
    }

    async getTracks() {
        // console.log(this.getAllObjects())
        return Object.values(await this.getAllObjects())
    }

    getElementById(id) {
        return this.getObjectById(id)
    }

    async duration(id_array) {
        let tracks = await this.getObjectsByIds(id_array)
        let dur = 0
        Object.keys(tracks).forEach((track_id) => {
            dur += (tracks[track_id].bounds.end - tracks[track_id].bounds.start)
        })
        return dur
    }
}

class PlaylistCollectionModel extends CollectionModel {
    // compare(a, b) {
    //     let x = a.name.toLowerCase();
    //     let y = b.name.toLowerCase();
    //     if (x < y) {return -1;}
    //     if (x > y) {return 1;}
    //     return 0;        
    // }    
}


module.exports = {
    CollectionModel: CollectionModel,
    TrackCollectionModel: TrackCollectionModel,
    PlaylistCollectionModel: PlaylistCollectionModel
}