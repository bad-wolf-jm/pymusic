const { EventDispatcher } = require("event_dispatcher")
const { Datastore } = require("nedb-async-await")


class CollectionController extends EventDispatcher {
    constructor(filename) {
        super()
        this.d = new Datastore({
            filename: filename, 
            autoload: true,
            timestampData: true})
    }

    // async getTracks() {
    //     let e = Object.keys(this._getElements())
    //     let t = await this.d.getTracksByIds(e)
    //     if (this.compareTracks != undefined) {
    //         t.sort(this.compareTracks)
    //     }
    //     return t
    // }


    getAll() {
        return this.getIds()
    }

    async getIds(id_array) {
        let objects; 
        if (id_array != undefined) {
            objects = await this.d.find({"_id": {"$in": id_array}})
        } else {
            objects = await this.d.find({})
        }
        if (this.compare != undefined) {
            objects.sort(this.compare)
        }
        console.log(id_array)
        return objects
    }

    async getId(id) {
        return (await this.getIds([id]))[0]
    }

    async length() {
        return await this.d.count({})        
    }

    async setData(object, new_data) {
        let [num, modified] = await this.d.update({_id: object._id},  {$set: new_data}, {returnUpdatedDocs: true})
        if (num > 0) {
            this.dispatch("track-metadata-changed". modified)
        }
        return modified
    }
}


class TrackCollectionController extends CollectionController {
    constructor(filename) {
        super(filename)
    }

    compare(a, b) {
        let x = a.title.toLowerCase();
        let y = b.title.toLowerCase();
        if (x < y) {return -1;}
        if (x > y) {return 1;}
        return 0;        
    }

    // length(id_array) {
    //     return this.d.count({})
    // }

    async duration(id_array) {
        let tracks = await this.getIds(id_array)
        let dur = 0
        tracks.forEach((track) => {
            dur += (track.bounds.end - track.bounds.start)
        })
        return dur
    }
}


module.exports = {
    CollectionController: CollectionController,
    TrackCollectionController: TrackCollectionController
}