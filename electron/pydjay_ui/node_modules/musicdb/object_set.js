const { EventDispatcher } = require("event_dispatcher")


class ObjectSetController extends EventDispatcher {

    constructor(db, collection, id) {
        super()
        this.d = db
        this.c = collection
        this.l = id
    }

    async _getElements() {
        let q = await this.c.getId(this.l)
        if (q != undefined) {
            return q.elements
        } else {
            return {}
        }
    }

    isEmpty() {
        let element_list = this._getElements()
        return (element_list[0] == null)
    }

    async _setElements(elements) {
        let n = await this.c.update({_id: this.l}, 
            {$set: {elements: elements}}, 
            {returnUpdatedDocs: true})    
        this.dispatch("content-changed", n)
        return n
    }

    async add(element) {
        let element_list = this._getElements()
        element_list[element] = true
        return this._setElements(element_list)
    }

    async remove(element) {
        let element_list = this._getElements()
        element_list[element] = undefined
        return this._setElements(element_list)
    }
}

class TrackSetController extends ObjectSetController {
    constructor(db, collection, id) {
        super(db, collection, id)
    }

    async getAll() {
        let e = Object.keys(await this._getElements())
        let t = await this.d.getTracksByIds(e)
        if (this.compareTracks != undefined) {
            t.sort(this.compareTracks)
        }
        return t
    }

    async getId(id) {
        return this.c.getId(id)
    }

    async length() {
        return await this.c.d.count(this.q)
    }

    async duration() {
        let tracks = await this.getAll()
        d = 0
        tracks.forEach((t) => {
            d += (t.bounds.end - t.bounds.start)
        })
        return d
    }


}

module.exports = {
    ObjectSetController: ObjectSetController,
    TrackSetController: TrackSetController
}