const { CollectionController } = require("./collection.js")


class ObjectListController extends CollectionController {

    constructor(db, collection, id) {
        super(db)
        this.d = db
        this.c = collection
        this.l = id
    }

    async getList() {
        let q = await this.c.find({_id: this.l})
        return q.tracks
    }

    isEmpty() {
        let track_list = this.getQueue().q
        return (track_list[0] == null)
    }

    async setElements(elements) {
        return this.c.update({_id: this.l}, 
            {$set: {elements: elements}}, 
            {returnUpdatedDocs: true})
    }

    async append(track) {
        let track_list = this.getList()
        track_list.push(track._id)
        let new_queue = await this.setElements(track_list)
        this.dispatch("content-changed", new_queue)
    }

    async insert(index) {
        let track_list = this.getList()
        track_list.push(track._id)
        let new_queue = await this.setElements(track_list)
        this.dispatch("content-changed", new_queue)
    }


    async remove(track) {
        let track_list = this.getList()
        let idx = track_list.indexOf(track._id)
        if ( idx != -1 ) {
            track_list.splice(index, 1)
            let new_queue = await this.setElements(track_list)
            this.dispatch("content-changed", new_queue)
        } 
    }

    async reorder(new_order) {
        let track_list = this.getList()
        let track_list_objects = {}
        track_list.forEach((x) => {track_list_objects[x] = true})
        if (new_order.length == track_list.length) {
            if (new_order.every((x) => {return (this.objects[x] != undefined)})) {
                let new_order = await this.setElements(track_list)
                this.dispatch("reorder", new_order)
            }
        }
    }



}

module.exports = {
    ObjectListController: ObjectListController
}