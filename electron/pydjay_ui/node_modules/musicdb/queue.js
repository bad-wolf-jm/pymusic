const { CollectionController } = require("./collection.js")
const { TrackListController } = require("./track_list.js")

class QueueController extends TrackListController {

    constructor(db, collection, id) {
        super(db)
        this.d = db
        this.c = collection
        this.l = id
    }

    async getQueue() {
        let q = await this.c.find({_id: this.l})
        return q.tracks
    }

    isEmpty() {
        let current_queue = this.getQueue().q
        return (current_queue[0] == null)
    }

    async pop() {
        let current_queue = this.getQueue().q
        if ((current_queue.length > 0) && (current_queue[0] != null)) {
            let next_id = current_queue.shift()
            await this.c.update({_id: this.l}, 
                        {$set: {tracks: current_queue}}, 
                        {returnUpdatedDocs: true})
            return this.getTrackById(next_id)
        }
    }

    async add(track) {
        let current_queue = this.getQueue().q
        current_queue.push(track._id)
        let new_queue = await this.c.update({_id: this.l}, 
            {$set: {tracks: current_queue}}, 
            {returnUpdatedDocs: true})
        this.dispatch("content-changed", new_queue)
    }

    async remove(track) {
        let current_queue = this.getQueue().q
        let idx = current_queue.indexOf(track._id)
        if ( idx != -1 ) {
            current_queue.splice(index, 1)
            let new_queue = await this.c.update({_id: this.l}, 
                {$set: {tracks: current_queue}}, 
                {returnUpdatedDocs: true})
            this.dispatch("content-changed", new_queue)
        } 
    }

    async reorder(new_order) {
        let current_queue = this.getQueue().q
        let current_queue_objects = {}
        current_queue.forEach((x) => {current_queue_objects[x] = true})
        if (new_order.length == current_queue.length) {
            if (new_order.every((x) => {return (this.objects[x] != undefined)})) {
                let new_queue = await this.c.update({_id: this.l}, 
                                        {$set: {tracks: new_order}}, 
                                        {returnUpdatedDocs: true})
                this.dispatch("reorder", new_order)
            }
        }
    }

    async getTracks() {
        let q = this.getQueue()
        let tracks = await this.d.getTracksByIds(q)
        let x = {}
        tracks.forEach((t) => {x[t._id] = t})
        return q.tracks.map((t) => {return x[t]})
    }


    length() {
        let q = this.getQueue()
        let i = q.indexOf(null)
        return (i == -1) ? q.length : i 
    }

    duration() {
        let q = this.getQueue()
        return this.d.duration(q.slice(0, this.length())) 
    }
}

module.exports = {
    QueueController: QueueController
}