const moment = require('moment');

class CellRenderer {
    constructor(config) {
        this._config = config
        this._baseStyle = ['white-space: nowrap', 'overflow: hidden', 'text-overflow: ellipsis']
    }

    _getValue(key, obj, def) {
        if (this._config[key]) {
            return this._config[key](obj)
        }
    }

    _decamelize(str, separator){
        separator = typeof separator === 'undefined' ? '-' : separator;
    
        return str
            .replace(/([a-z\d])([A-Z])/g, '$1' + separator + '$2')
            .replace(/([A-Z]+)([A-Z][a-z\d]+)/g, '$1' + separator + '$2')
            .toLowerCase();
    }

    _renderStyle(obj) {
        let styleElements = ["color", "backgroundColor", "textAlign", "maxWidth", "width"]
        let style = []
        styleElements.forEach((s) => {
            let styleElement;
            if (this._config[s] && typeof this._config[s] == "function") {
                styleElement = `${this._decamelize(s)}: ${this._config[s](obj)}`
            } else if (this._config[s]) {
                styleElement = `${this._decamelize(s)}: ${this._config[s]}`
            } else if (obj[s]) {
                styleElement = `${this._decamelize(s)}: ${obj[s]}`
            }
            styleElement && style.push(styleElement)
        })
        return `${this._baseStyle.join('; ')}; ${style.join("; ")}`
    }

    renderEditor(id, obj) {
        return `<input id="${id}" type="text" class="new-playlist" value="">`
    }

    formatNull(x) {
        return x ? x : `<span style="color: rgb(100,90,90)">NULL</span>`
    }
}

class TextRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let text = this._getValue("text", obj)
        let id = this._config.id
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">${this.formatNull(text)}</td>`
    }

    renderEditor(id, obj) {
        let text = this._getValue("text", obj)
        console.log(text, this.isNull)
        text = text ? text : ""
        let isNull = !(text)
        return `<input id="${id}" type="text" class="new-playlist" value="${isNull ? "" : text}">`
    }
}


class ImageRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let src = this._getValue("src", obj)
        let id = this._config.id
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}"><img src="${src}" height=75px></img></td>`
    }
}



class SpaceRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let text = this._getValue("text", obj)
        let id = this._config.id
        this.isNull = text
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}"></td>`
    }

    renderEditor(id, obj) {
        let text = this._getValue("text", obj)
        text = text ? text : ""
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}"></td>`
    }
}


class NumberRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let text = this._getValue("text", obj)
        let id = this._config.id
        text = text ? text : ""
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">${this.formatNull(text)}</td>`
    }

    renderEditor(id, obj) {
        let text = this._getValue("text", obj)
        text = text ? text : ""
        return `<input id="${id}" type="text" class="new-playlist" value="${text}">`
    }
}


class DateRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let date = this._getValue("date", obj)
        let text;
        if (date) {
            text = moment(date).format(this._config.dateFormat ? this._config.dateFormat : 'MM-DD-YYYY')
        } else {
            text = ""
        }
        let id = this._getValue("id", obj)
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">${text}</td>`
    }
}


class RatingRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    _renderRatingStars(id, value) {
        let html = "";
        for (let j=1; j<6; j++) {
            html += `<i id='${id}-${j}' class='fa ${( j <= value ? "fa-star" : "fa-star-o")}' style='font-size:8pt; margin-left:3px'></i>`;
        }
        return html
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let value = this._getValue("value", obj)
        let id = this._config.id
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">
            ${this._renderRatingStars(id ? id(rowId, colId) : "", value)}
        </td>`
    }
}


class ToggleRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    _renderToggleSwitch(id, value) {
        return `<i id='${id}-value' class='fa ${(value ? this._config.checked : this._config.unchecked)}' style="font-size:8pt"></i>`
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let value = this._getValue("value", obj)
        let id = this._config.id
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">
            ${this._renderToggleSwitch(id ? id(rowId, colId) : "", value)}
        </td>`
    }
}


class CheckboxRenderer extends CellRenderer {
    constructor(config) {
        super(config)
    }

    _renderToggleSwitch(id, checked) {
        return `<input type="checkbox" id='${id}-value' style="font-size:8pt" ${checked ? "checked" : ""}></input>`
    }

    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let checked = this._getValue("checked", obj)
        let id = this._config.id
        // console.log(checked)
        return `<td ${id ? `id='${id(rowId, colId)}'` : ""} style="${style}">
            ${this._renderToggleSwitch(id ? id(rowId, colId) : "", checked)}
        </td>`
    }
}


module.exports = {
    CellRenderer: CellRenderer,
    TextRenderer: TextRenderer,
    NumberRenderer: NumberRenderer,
    DateRenderer: DateRenderer,
    RatingRenderer: RatingRenderer,
    ToggleRenderer: ToggleRenderer,
    CheckboxRenderer: CheckboxRenderer,
    SpaceRenderer: SpaceRenderer,
    ImageRenderer: ImageRenderer
}