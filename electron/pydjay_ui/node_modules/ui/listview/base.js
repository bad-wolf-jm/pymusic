
class UnorderedListHandler {
    constructor() {
        this._ids = {}
        this._ordering = []
    }

    add(id, element) {
        this._ids[id] = (element || true)
        this._ordering.push(id)
    }

    remove(id) {
        delete this._ids[id]
        let orderingIndex = this._ordering.indexOf(id)
        if (orderingIndex != -1) {
            this._ordering.splice(orderingIndex, 1)
        }
    }
    
    getList() {
        return this._ordering.map((id) => {
            return this._ids[id]
        })
    }

    getElementIds() {
        return Object.keys(this._ids)
    }

    getElementById(id) {
        return this._ids[id]
    }

    clear() {
        this._ids = {}
        this._ordering = []
    }

    getRowIndex(id) {
        return this._ordering.indexOf(id)
    }

    getRowId(n) {
        return this._ordering[n]
    }

    getFirst() {
        if (this._ordering.length > 0) {
            return this._ordering[0]
        } else {
            return undefined
        }
    }


    getLast() {
        if (this._ordering.length > 0) {
            return this._ordering[this._ordering.length - 1]
        } else {
            return undefined
        }
    }

    length() {
        return this._ordering.length
    }
}


class BaseListView extends EventDispatcher {
    constructor(element, list_scroller) {
        super()
        this._viewId = this._id()
        this.domElement = element
        this.scrollerElement = list_scroller
        this._selection = new UnorderedListHandler()
        this._dimmed = new UnorderedListHandler()
        this._row_elements = new UnorderedListHandler()
        this._rows = new UnorderedListHandler()
        this._elements = new UnorderedListHandler()
        this.rowHeight = 30
        this._ignore_dimming = false

        this._column_renderers = []

        this.domElement.addEventListener('click', (event) => {
            this.handleClick(event)
        }, false);

        this.domElement.addEventListener('dblclick', (event) => {
            this.handleDoubleClick(event)
        }, false);

        this.domElement.addEventListener('dragstart', (event) => {
            this.handleDragStart(event)
        }, false);

        this.domElement.addEventListener('contextmenu', (event) => {
            e.preventDefault()
            this.handleContextMenu(event)
        }, false);

        this.domElement.addEventListener('dragenter', (event) => {
            this.handleDragEnter(event)
        }, false);

        this.domElement.addEventListener('dragover', (event) => {
            this.handleDragOver(event)
        }, false); 

        this.domElement.addEventListener('dragend',   (event) => {
            this.handleDragEnd(event)
        }, false); 

        this.domElement.addEventListener('drop',     (event) => {
            this.handleDrop(event)
        }, false);

        this.scrollerElement.addEventListener("scroll", (event) => {
            this.handleScroll(event)
        }, false)
    }

    _id() {
        return '_' + Math.random().toString(36).substr(2, 9);
    };


    setRows(object_list) {
        this._rows.clear()
        this._elements.clear()
        object_list.forEach((row) => {
            let rowId = this._id()
            this._rows.add(rowId, this.renderRow(rowId, row))
            this._elements.add(rowId, row)
        })
    }

    renderRow(rowId, element) {
        let columnIndex = 0
        let columns = this._column_renderers.map((renderer) => {
            columnIndex += 1
            return renderer(rowId, columnIndex, element)
        })
        return `<tr id='${rowId}' class="list-group-item row ${this._viewId}" draggable=true>
                    ${columns.join("")}
                </tr>`
    }

    addColumnRenderer(renderer) {
        this._column_renderers.push(renderer)
    }

    getEventElementId(event) {
        let x = e.target.closest("tr")
        return  x.id 
    }

    setRowElements(row_list) {
        this._row_elements.clear()
        if ((row_list) || (row_list.length)) {
            row_list.forEach((row) => {
                this._row_elements.add(row.id, row)
            })
        }
    }

    setDimmedRows(idList) {
        if (this._ignore_dimming) {
            return;
        }
        let idSet = {}
        idList.forEach((t) => {idSet[t] = true})
        this._dimmed.getElementIds().forEach((t) => {
            let row = this._row_elements.getElementById(t)
            row && row.classList.remove("unavailable")
        })
        Object.keys(idSet).forEach((t) => {
            let row = this._row_elements.getElementById(t)
            this._dimmed.add(t)
            row && row.classList.add("unavailable")
        })
    }

    handleScroll(event) {

    }

    handleDragStart(event) {

    }

    handleDragEnter(event) {

    }

    handleDragEnd(event) {
        
    }

    handleDragOver(event) {
        
    }

    handleDrop(event) {
        
    }

    handleDoubleClick(event) {

    }

    handleClick(event) {

    }

    clearSelection() {
        this._selection.getElementIds().forEach((id) => {
            this.unselectTableElement(id)
        })
        this._selection.clear()
    }

    addToSelection(id) {
        this._selection.add(id)
        this.selectTableElement(id)
    }

    selectRow(id) {
        this.clearSelection()
        this.ensureRowVisible(id)
        this.addToSelection(id)
    }

    moveSelection(amount) {
        this.d = Math.sign(amount)
        let last_selection  = this._selection.getLast()
        if (last_selection != undefined) {
            let i = this.getRowIndex(last_selection._id)
            let n
            if (i != -1) {
                n = i + amount
                n = Math.max(n, 0)
                n = Math.min(n, this._selection.length() - 1)
            } else {
                n = 0
            }
            this.selectRow(this.getRowId(n))
        } else {
            this.selectRow(this.getRowId(n))
        }
    }

    moveDown() {
        this.moveSelection(1)
    }

    moveUp() {
        this.moveSelection(-1)
    }

    moveLast() {
        let e = this._row_elements.getLast()
        if (e != undefined) {
            this.ensureRowVisible(e)
            this.selectRow(e)
        }
    }

    moveFirst() {
        let e = this._row_elements.getFirst()
        if (e != undefined) {
            this.ensureRowVisible(e)
            this.selectRow(e)
        }
    }

    pageUp() {
        let y = this.scrollerElement.getBoundingClientRect()
        this.scrollerElement.scrollTop -= y.height
    }

    pageDown() {
        let y = this.scrollerElement.getBoundingClientRect()
        this.scrollerElement.scrollTop += y.height
    }

    getTableElement(id) {
        return this._row_elements.getElementById(id)
    }

    selectTableElement(id) {
        let e = this.getTableElement(id)      
        if (e != undefined) {
            e.classList.add("selected")
        }
    }

    unselectTableElement(id) {
        let e = this.getTableElement(id)      
        if (e != undefined) {
            e.classList.remove("selected")
        }
    }

    ensureRowVisible(id) {
        let row = this.getTableElement(id)
        let scrollerRect = this.scrollerElement.getBoundingClientRect()
        if (row == undefined) {
            this.scrollerElement.scrollTop += (this.d * this.rowHeight)
        } else {
            let rowRect = row.getBoundingClientRect()
            let offsetTop = (rowRect.y - scrollerRect.y)
            let offsetBottom = offsetTop + rowRect.height
            let y = this.scrollerElement.getBoundingClientRect()
            if (offsetBottom >= y.height) {
                this.scrollerElement.scrollTop += (offsetBottom - y.height)
            } else if (offsetTop < 0) {
                this.scrollerElement.scrollTop += (offsetTop)
            }
        }
    }
}

module.exports = {
    UnorderedListHandler: UnorderedListHandler,
    BaseListView: BaseListView
}
