const Clusterize = require("clusterize.js")
const { BaseListView } = require("./base")

class ClusteredListView extends BaseListView {
    constructor(element, list_scroller) {
        super(element, list_scroller)
        this._row_list = []
        this._cluster = new Clusterize({
            rows: [],
            scrollElem: this.scrollerElement,
            contentElem: this.domElement,
            callbacks: {
                clusterWillChange: () => {
                    this._row_elements.clear()
                },
                clusterChanged: () => {
                    let elements = document.querySelectorAll(`.${this._viewId}`);
                    this.setRowElements(elements)
                    super.setDimmedRows(this._dimmed.getElementIds())
                    this.clusterChanged(elements)
                },
                scrollingProgress: (progress) => {
                    let viewportBottom = this.scrollerElement.getBoundingClientRect().bottom
                    let tableBottom = this.domElement.getBoundingClientRect().bottom
                    if (tableBottom <= viewportBottom) {
                        this.endOfTable()
                    }
                }
            }
        });
    }

    setRows(elems) {
        let x = super.setRows(elems)
        this._row_list = this._displayed_rows.getList()
        this._cluster.update(this._row_list)
        return x
    }

    appendRows(elems) {
        let addedRows = super.appendRows(elems)        
        let rowList = this._displayed_rows.getList()
        let rowsToAppend = rowList.filter((r) => {
            return addedRows[r.id]
        })
        this._cluster.append(rowsToAppend)
        return addedRows
    }

    updateFilter() {
        this._row_list = this._displayed_rows.getList()
        this._cluster.update(this._row_list)
    }


    updateElement(rowId, element) {
        super.updateElement(rowId, element)
        let new_rendered_element = this._rendered_rows.getElementById(rowId)
        let list_index = this._rendered_rows.getRowIndex(rowId)
        if (list_index != -1) {
            this._row_list[list_index] = new_rendered_element
        }
    }

    clusterChanged(rows) {

    }

    endOfTable() {

    }
}

module.exports = {
    ClusteredListView: ClusteredListView
}