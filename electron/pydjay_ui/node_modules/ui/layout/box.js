const { DOMElement } = require("ui/dom/domelement.js")


class BoxLayout extends DOMElement {
    constructor(orientation, margins) {
        super("div")
        this.orientation = orientation || "vertical"
        let baseClass = `${orientation}-box`
        this._blockMode = orientation == 'vertical' ? "block" : 'inline-block' 
        this.children = []

        margins = margins || {left:0, right:0, top:0, bottom:0}
        this.paddingHeight = margins.padding || 0
        this._layout = new DOMElement("div")
        this._layout.domElement.classList.add('flex-layout')
        this._layout.domElement.classList.add(baseClass)

        let marginSize = this._computeMargin(margins)
        this._layout.setStyle({
            position: "relative",
            top: "0px",
            left: "0px",
            marginLeft: `${margins.left || 0}px`,
            marginRight: `${margins.right|| 0}px`,
            marginTop : `${margins.top || 0}px`,
            marginBottom : `${margins.bottom || 0}px`,
            width: `calc(100% - ${marginSize.horizontal}px)`,
            height: `calc(100% - ${marginSize.vertical}px)`
        })
        this.appendChild(this._layout)
    }

    _computeMargin(x) {
        let horizontal = x ? (x.left || 0) + (x.right || 0) : 0
        let vertical = x ? (x.top || 0) + (x.bottom || 0) : 0
        return {horizontal: horizontal, vertical: vertical}
    }

    _expandDimension(x) {
        if (this.orientation == "vertical") {
            x.setStyle({width: "100%"})
        } else if (this.orientation == "horizontal") {
            x.setStyle({height: "100%"})
        }
    }

    padding() {
        let x = new DOMElement('div')
        if (this.orientation == "vertical") {
            x.setStyle({height: this.paddingHeight+"px"})
        } else if (this.orientation == "horizontal") {
            x.setStyle({width: this.paddingHeight+"px"})
        }
        return x
    }

    append(child, expand, fill, dimension) {
        let container = new DOMElement("div")
        container.domElement.classList.add("flex-layout")
        container.domElement.classList.add("container")

        expand && container.domElement.classList.add("expand")
        dimension && container.setStyle({
            flexBasis: `${dimension}px`,
            flexGrow: 0,
            flexShrink: 0
        })

        child.setStyle({
            top: "0px",
            left: "0px",
            margin: "0px",
            padding: "0px",
            display: "block"
        })
        if (fill) {
            child.setStyle({
                flex:1,
            })
        } else {
            child.setStyle({
                width: dimension.width,
                height: dimension.height
            })
        }

        container.appendChild(child);
        
        (this.children.length > 0) && this._layout.appendChild(this.padding())
        
        this._layout.appendChild(container)
        this.children.push({
            container: container,
            element: child,
            expand: (expand && true)  || false,
            fill: (fill && true)  || false
        })

    }

    layout() {

    }
}

module.exports = {
    BoxLayout: BoxLayout
}