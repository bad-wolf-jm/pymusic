const { DOMElement } = require("ui/dom/domelement.js")
const { Label } = require("ui/dom/label")
const { BoxLayout } = require("ui/layout/box")


class AccordionHeader extends BoxLayout {
    constructor(label, actions) {
        super("horizontal", {left:5, right:5, top:5, botttom:5, padding:5})
        this.collapsed = true
        this.collapsedIndicator = new Label()
        this.collapsedIndicator.setText(`<i class="fa fa-plus"></i>`)
        this.nameLabel = new Label()
        this.nameLabel.setText(label)
        this.append(this.collapsedIndicator, false, true, 20)
        this.append(this.nameLabel, true, true)
        if (actions) {
            this.actionButtons = new BoxLayout('horizontal', {padding: 3})
            this.append(this.actionButtons, false, true, 40)
        }
        this.domElement.addEventListener("click", (e) => {
            this.dispatch("open-panel")
            e.preventDefault()
        })
        this.setStyle({
            backgroundColor: "rgb(30,30,30)",
            lineHeight: '20px',
            fontWeight: "bold",
            width: "100%",
            height: "30px",
            position:"relative"
        })
    }
}

class AccordionLayout extends DOMElement {
    constructor() {
        super("div")
        this.headers = {}
        this.panels = {}
        this.panelHeights = {}
        this.panelOpen = {}
        this.availableHeight = 0
        this.headerHeight = 0
        window.addEventListener("resize", (event) => {
            this.adjustHeights()
        })
    }

    adjustHeights() {
        let total_height = this.domElement.clientHeight
        let header_height = 0
        Object.keys(this.headers).forEach((k) => {
            header_height += this.headers[k].domElement.clientHeight
        })
        this.availableHeight = total_height - header_height  
        this.resize_panels()  
    }

    resize_panels() {
        
    }

    addPanel(label, actions, item, height) {
        item.setStyle({
            position: "relative"
        })
        item.domElement.classList.add("panel")
        console.log(item)
        let panelHeader = new AccordionHeader(label, actions)
        this.headers[item.domElement.id] = panelHeader
        this.panels[item.domElement.id] = item
        this.panelHeights[item.domElement.id] = height
        this.panelOpen[item.domElement.id] = false
        this.appendChild(panelHeader)
        this.appendChild(item)
        item.domElement.style.height = null;
        item.domElement.style.maxHeight = null;

        panelHeader.on("open-panel", () => {
            if (!(this.panelOpen[item.domElement.id])) {
                this.openPanel(item)
            } else {
                this.closePanel(item)
            }
        })
        this.adjustHeights()
    }

    computeFixedHeight() {
        let invariableHeight = 0
        Object.keys(this.panels).forEach((k) => {
            if (this.panelOpen[k] && (this.panelHeights[k] != undefined)) {
                invariableHeight += this.panelHeights[k]
            }
        })
        return invariableHeight
    }

    getVariableHeightPanels() {
        let variableHeightPanels = {}
        Object.keys(this.panels).forEach((k) => {
            if (this.panelOpen[k] && (this.panelHeights[k] != undefined)) {

            } else if (this.panelOpen[k]) {
                variableHeightPanels[k] = this.panels[k]
            }
        })
        return variableHeightPanels
    }

    _resizeVariableHeightPanels(variableHeightPanels, invariable_height, closing) {
        let availableHeight = this.availableHeight - invariable_height
        let num, splitHeight;
        num = Object.keys(variableHeightPanels).length
        splitHeight = availableHeight / (closing ? num : num + 1)
        Object.keys(variableHeightPanels).forEach((k) => {
            variableHeightPanels[k].domElement.style.height = splitHeight + "px";
            variableHeightPanels[k].domElement.style.maxHeight = splitHeight + "px";
        })
        return splitHeight
    }

    openPanel(panel) {
        let height;
        if (this.panelHeights[panel.domElement.id] != undefined) {
            height = this.panelHeights[panel.domElement.id]
            let invariable_height = height + this.computeFixedHeight()
            let variableHeightPanels = this.getVariableHeightPanels()
            this._resizeVariableHeightPanels(variableHeightPanels, invariable_height)
        } else {
            let invariable_height = this.computeFixedHeight()
            let variableHeightPanels = this.getVariableHeightPanels()
            height = this._resizeVariableHeightPanels(variableHeightPanels, invariable_height)
        }
        panel.domElement.style.height = height + "px";
        panel.domElement.style.maxHeight = height + "px";
        this.panelOpen[panel.domElement.id] = true
    }

    closePanel(panel) {
        panel.domElement.style.maxHeight = null;
        this.panelOpen[panel.domElement.id] = false
        let invariable_height = this.computeFixedHeight()
        let variableHeightPanels = this.getVariableHeightPanels()
        console.log(variableHeightPanels)
        this._resizeVariableHeightPanels(variableHeightPanels, invariable_height, true)
    }
}

module.exports = {
    AccordionLayout: AccordionLayout
}