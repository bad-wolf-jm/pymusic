const { DOMElement } = require("ui/dom/domelement.js")


class TagInput extends DOMElement {
    constructor() {
        super("div")

        this._tagList = {}
        this._newTags = {}
        this._tags = []

        this.setStyle({
            borderRadius: "2px",
            border: "1px solid black",
            width: '100%'
        })

        this._tagDoms = new DOMElement('div')
        this._tagDoms.setStyle({
            display: "inline-block",
            width: 'calc(100% - 40px)'
        })
        this._textInput = new DOMElement("input")
        this._textInput.setStyle({
            display: "inline-block",
            width: "calc(100% - 10px)",
            border: "0px solid black",
            margin: "5px"
        })
        this._textInput.domElement.type = "text"

        this._textInput.domElement.addEventListener("keyup", (e) => {
            if (e.key == ',') {
                let tagValue = this._textInput.domElement.value.split(',')[0]
                if (tagValue != "") {
                    let tag = this._getTag(tagValue)
                    if (tag) {
                        this._tagDoms.domElement.appendChild(this.createTag(tag).domElement, this._textInput.domElement)
                        this._tags.push(tag)
                        this._textInput.domElement.value = ""
                    } else {
                        this._textInput.setStyle({color: "#FF0000"})
                    }
                }
                e.preventDefault()    
            } else {
                this._textInput.setStyle({color: null})
            }
        });

        this.appendChildren([this._textInput, this._tagDoms])

    }

    _getTag(value) {
        return this._tagList[value.toLowerCase()]
    }

    createTag(tag) {
        let newTag = new DOMElement('div')
        newTag.setStyle({
            display: 'inline-block',
            width: "100%",
            lineHeight: '20px',
            borderRadius: "7px",
            marginTop: "2px",
            marginBottom: "2px",
            paddingLeft: '5px',
            paddingRight: '5px',
            paddingTop: "2px",
            paddingBottom: "2px"
        })
        if (tag) {
            newTag.setStyle({
                backgroundColor: tag.color
            })
        } else {
            newTag.setStyle({
                border: '1px solid black'
            })
        }
        newTag.domElement.innerHTML = `<span style="mix-blend-mode: difference; color: #ffffff">${tag.name.replace(" ", "&nbsp;")}</span>`
        return newTag
    }

    setList(tagList) {
        this._tagList = {}
        tagList.forEach((t) => {
            this._tagList[t.name.toLowerCase()] = t
        })
    }

    setTags(list) {
        list.forEach((tag) => {
            this._tagDoms.domElement.appendChild(this.createTag(tag).domElement, this._textInput.domElement)
            this._tags.push(tag)
        })
    }

    getTags() {
        return this._tags
    }

}

module.exports = {
    TagInput: TagInput
}