const { DOMElement } = require("ui/dom/domelement.js")
const { Bubble } = require("ui/popup/bubble.js")
const { SortableListView } = require('ui/listview/sortable')
const { ScrollArea } = require("ui/dom/scroll_area.js")
const { CellRenderer } = require('ui/listview/renderer')
const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { BoxLayout } = require("ui/layout/box")


class ElementRenderer extends CellRenderer {
    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let id = this._getValue("id", obj)
        return `<td style="width:100%; margin:0; padding:0">
            <div class="queued-track element eoq" style="background-color:${obj.color}; line-height:25px; vertical-align:middle; text-align:left">
                <b style="mix-blend-mode: difference; color: #ffffff">${obj.name}</b>
            </div>
        </td>`
    }
}


class TagListView extends SortableListView {
    constructor(scrollerElement, tableBody) {
        super(scrollerElement, tableBody)
        this.tableBody = tableBody
        this.tags = []
        this.tagObjects = {}
        this.addColumnRenderer(new ElementRenderer({
            id: (obj) => {return obj.id},

            })
        )
    }

    convert_tag(x) {
        let element = {
            id: x._id,
            name: x.name,
            color: x.color
        }
        return element
    }

    startReorder() {
        this._reordering = true
    }

    listReordered(new_order) {
        this._reordering = false

        this.tags = new_order.map((x) => {
            return this.tagObjects[this._elements.getElementById(x).id]
        })
    }

    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }
        this.tagObjects = {}
        list_elements.forEach((x) => {
            this.tagObjects[x._id] = x
        })
        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))
        this.tags = list_elements.map((x) => { return x })
        this.tableBody.innerHTML = this._rendered_rows.getList().join("")
        let elements = document.querySelectorAll(`.${this._viewId}`);
        this.setRowElements(elements)
        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    getTags() {
        return this.tags
    }

}


class TagPicker extends Bubble {
    constructor(parent_element, config) {
        super(parent_element)
        this.configuration = config
        this.layout = new BoxLayout("vertical", {left: 10, right: 10, top: 10, bottom: 10, padding: 10})

        let tagListScroller = new ScrollArea()
        tagListScroller.setStyle({
            overflow: null,
            overflowY: "auto"
        })
        let tagListTable = new DOMElement("table")
        tagListTable.setStyle({
            width: "100%"
        })
        let tagListBody = new DOMElement('tbody')
        tagListTable.appendChild(tagListBody)
        this._input = new TagListView(tagListScroller.domElement, tagListBody.domElement)
        tagListScroller.appendChild(tagListTable)

        this._input.setList(this.configuration.tags || [])
        this.layout.append(tagListScroller, true, true)

        let save_button = new ConfirmButton()
        save_button.setText("Save")
        save_button.on("click", () => {
            if (this.configuration.updateTags != undefined) {
                this.configuration.updateTags(this._input.getTags())
                this.close()
            }
        })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)
        this.layout.append(button_layout, false, true, 30)


        this.appendChildren([this.layout])
        this.setStyle({width:'150px', height:'250px'})
    }

}

module.exports = {
    TagPicker: TagPicker
}