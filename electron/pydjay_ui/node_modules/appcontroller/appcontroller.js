const { EventDispatcher } = require("notify/event_dispatcher.js")
const { MusicDatabase } = require("musicdb/model.js")

class PymusicAppController extends EventDispatcher {
    constructor() {
        super()
        this.library = MusicDatabase("pymusic")
        this.main = new PlaybackController()
        this.prelisten = new PrecueController()   

        this.main.on("track-started", (log_data) => {
            this.library.state.d.update({_id:"settings"}, {
                $set: {"current_track._id": log_data._id}
            })
        })
    
        this.main.on("track-finished", (log_data) => {
            this.library.current_session.append(log_data.track_object, {
                status: "FINISHED",
                time_start: log_data.start_time, 
                time_end: log_data.end_time
            })
            this.library.tracks.setTrackMetadata(log_data.track_object, {
                "stats.last_played": log_data.start_time,
                "stats.play_count": log_data.track_object.stats.play_count + 1
            })
        })
        
        this.main.on("track-stopped", (log_data) => {
            this.library.current_session.append(log_data.track_object, {
                status: "STOPPED",
                time_start: log_data.start_time, 
                time_end: log_data.end_time
            })
            this.library.tracks.setTrackMetadata(log_data.track_object, {
                "stats.last_played": log_data.start_time,
                "stats.play_count": log_data.track_object.stats.play_count + 1
            })
        })
    
        this.main.on("track-skipped", (log_data) => {
            MDB.current_session.append(log_data.track_object, {
                status: "SKIPPED",
                time_start: log_data.start_time, 
                time_end: log_data.end_time
            })
            MDB.tracks.setTrackMetadata(log_data.track_object, {
                "stats.last_played": log_data.start_time,
                "stats.play_count": log_data.track_object.stats.play_count + 1
            })
        })

        this.prelisten.on('playback-started', () => {
            this.main.muteHeadset()
        })
    
        this.prelisten.on('playback-paused', () => {
            this.main.unmuteHeadset()
        })
    

    }

}