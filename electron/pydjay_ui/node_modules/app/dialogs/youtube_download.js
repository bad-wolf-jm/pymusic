
const { RemoteTrackPlayer } = require("track_playback/remote_player/remote_player.js")
const { DOMElement } = require("ui/dom/domelement.js")
const { Image } = require("ui/dom/image.js")
const { TextInput } = require("ui/dom/text_input.js")
const { Label } = require("ui/dom/label")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { StackLayout } = require("ui/layout/stack")
const { LabeledInput } = require('ui/dom/labeled_input')
const { ProgressBar } = require("ui/dom/progress")

const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { Rating } = require("ui/dom/rating")
const { CustomCheckbox } = require("ui/dom/favorite")

const moment = require('moment');
const { remote } = require('electron')
const { Menu, MenuItem } = remote
var Jimp = require("jimp");
var path = require('path');
const ytdl = require('ytdl-core');
const ffmpeg = require('fluent-ffmpeg');


function getFileExtension(f_name) {
    return f_name.slice((Math.max(0, f_name.lastIndexOf(".")) || Infinity) + 1);
}

class CoverArtMenu extends EventDispatcher {
    constructor(actions) {
        super()
        this.menu = new Menu()
        this.menu.append(new MenuItem({label: 'Change', click: () => {
            remote.dialog.showOpenDialog({ properties: ['openFile']}, (files) => {
                if ((files != undefined)) {
                    let new_cover = files[0]
                    actions.chooseCover(new_cover)
                }
            })
        }}))
        this.menu.append(new MenuItem({label: 'Revert to original', click: () => {
            actions.revertToOriginal()
        }}))


        this.menu.append(new MenuItem({label: 'Remove cover art', click: () => {
            actions.remove()
        }}))
    }

    popup() {
        this.menu.popup({window: remote.getCurrentWindow()})
    }
}


class YoutubeDownloadDialog extends Dialog {
    constructor(id, stream, track, library, config) {
        super()
        this.setTitle("Track info")
        this.setStyle({width:'600px', height:"550px"})
        this.library = library
        this.track = track
        this.id = id
        this.stream = stream
        this.audio_player = new RemoteTrackPlayer()
        this.audio_player.addOutput("headphones")
        this.setOutputDeviceId("null")
        this.audio_player.initialize()

        this.coverImageInput = new Image()
        this.coverImageInput.setStyle({
            border: "1px solid black"
        })
        this.coverImageInput.domElement.addEventListener("contextmenu", () => {
            let menu = new CoverArtMenu({
                chooseCover: (newCover) => {
                    Jimp.read(newCover, (error, image) => {
                        if (!error) {
                            this.coverImageInput.setImage(newCover)
                            this.coverImage = image
                            this.coverImageExtension = getFileExtension(newCover)
                        }
                    })
                },
                revertToOriginal: () => {
                    let coverSource;
                    if (this.originalCoverImage == null) {
                        coverSource = "../../resources/images/default_album_cover.png"
                        this.coverImage = undefined
                    } else {
                        coverSource = this.originalCoverImage;
                        this.coverImage = undefined
                    }
                    this.coverImageInput.setImage(coverSource)
                },
                remove: () => {
                    let coverSource;
                    coverSource = "../../resources/images/default_album_cover.png"
                    this.coverImage = null
                    this.coverImageInput.setImage(coverSource)
                }                
            })
            menu.popup()
        })

        this.titleInput = new LabeledInput("title")
        this.artistInput = new LabeledInput("artist")
        this.albumInput = new LabeledInput("album")

        this.ratingInput = new Rating()
        this.favoriteInput = new CustomCheckbox()
        let ratingLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        ratingLayout.append(this.ratingInput, false, true, 75)
        ratingLayout.append(this.favoriteInput, false, true, 15)

        let layout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        let metadataLayout = new BoxLayout("vertical", {left:0, right:0, top:0, bottom:0, padding:5})
        metadataLayout.append(this.titleInput, false, true, 40)
        metadataLayout.append(this.artistInput, false, true, 40)
        metadataLayout.append(this.albumInput, false, true, 40)
        metadataLayout.append(new DOMElement('div'), false, true, 5)
        metadataLayout.append(ratingLayout, false, true, 30)
        layout.append(this.coverImageInput, false, true, 175)
        layout.append(metadataLayout, true, true)


        this.genreInput = new LabeledInput("genre")
        this.yearInput = new LabeledInput("year")
        this.bpmInput = new LabeledInput("bpm")
        let genreLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        genreLayout.append(this.genreInput, true, true)
        genreLayout.append(this.yearInput, true, true)
        genreLayout.append(this.bpmInput, true, true)
        let downloadStack = new StackLayout()
        let downloadProgressLayout = new BoxLayout("vertical", {left:0, right:0, top:0, bottom:0, padding:10})
        let downloadProgress = new ProgressBar()
        downloadProgress.domElement.classList.add('precue-player-progress')

        let downloadLabel = new Label()
        downloadLabel.setStyle({
            color:"rgb(30,30,30)",
            textAlign: "left",
            fontWeight: "bold",

        })

        downloadLabel.setText("Downloading...")
        downloadProgress.setBounds(0, 100)
        downloadProgressLayout.append(downloadLabel, true, true)
        downloadProgressLayout.append(downloadProgress, true, true)
        downloadStack.addItem("progress", downloadProgressLayout)

        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let save_button = new ConfirmButton()
        save_button.setText("Save")
        save_button.on("click", async () => {

            let stream = ytdl(this.id, {
                quality: 'highestaudio',
                filter: 'audioonly',
            });


            stream.on('response', (res) => {
                var totalSize = res.headers['content-length'];
                var dataRead = 0;
                res.on('data', (data) =>  {
                  dataRead += data.length;
                  var percent = dataRead / totalSize;
                  downloadProgress.setValue(percent*100)
                });
            })
            ffmpeg(stream)
                .audioBitrate(256)
                .save(`${this.library.getTracksDownloadFolder()}/track_${this.id}.mp3`)
                .on('progress', (p) => {

                })
                .on('end', () => {

                });
        })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.audio_player.stop()
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)

        this.layout.append(layout, false, true, 175)
        this.layout.append(genreLayout, false, true, 40)
        this.layout.append(downloadStack, false, true, 40)
        this.layout.append(new DOMElement("div"), true, true)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])
    }

    setOutputDeviceId(deviceId) {
        (deviceId != this.getOutputDeviceId()) && this.audio_player.setOutputDeviceId("headphones", deviceId)
    }

    getOutputDeviceId() {
        return this.audio_player.getOutputDeviceIds()["headphones"]
    }

    async open() {
        super.open()
    }

    getValues() {
        let v = {
            "metadata.title": this.titleInput.getText(), 
            "metadata.album": this.albumInput.getText(),
            'metadata.artist': this.artistInput.getText(), 
            "track.bpm": this.bpmInput.getText(), 
            "metadata.genre": this.genreInput.getText(),
            "metadata.year": this.yearInput.getText(), 
            "stats.loved": this.favoriteInput.getValue() || false,
            "stats.rating": this.ratingInput.getRating() || 0
        }
        v['metadata.year'] = (v['metadata.year'] != "") ? v['metadata.year'] : null
        v['track.bpm'] = (v['track.bpm'] != "") ? v['track.bpm'] : null
        return v
    }
}

module.exports = {
    YoutubeDownloadDialog: YoutubeDownloadDialog
}