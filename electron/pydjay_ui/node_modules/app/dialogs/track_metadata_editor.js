
const { RemoteTrackPlayer } = require("track_playback/remote_player/remote_player.js")
const { DOMElement } = require("ui/dom/domelement.js")
const { Image } = require("ui/dom/image.js")
const { TextInput } = require("ui/dom/text_input.js")
const { LabeledInfo } = require("ui/dom/tagged_label")
const { Label } = require("ui/dom/label")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { LabeledInput } = require('ui/dom/labeled_input')

const { Rating } = require("ui/dom/rating")
const { CustomCheckbox } = require("ui/dom/favorite")

const moment = require('moment');
const { remote } = require('electron')
const { Menu, MenuItem } = remote
var Jimp = require("jimp");
var path = require('path');


function getFileExtension(f_name) {
    return f_name.slice((Math.max(0, f_name.lastIndexOf(".")) || Infinity) + 1);
}

class CoverArtMenu extends EventDispatcher {
    constructor(actions) {
        super()
        this.menu = new Menu()
        this.menu.append(new MenuItem({label: 'Change', click: () => {
            remote.dialog.showOpenDialog({ properties: ['openFile']}, (files) => {
                if ((files != undefined)) {
                    let new_cover = files[0]
                    actions.chooseCover(new_cover)
                }
            })
        }}))
        this.menu.append(new MenuItem({label: 'Revert to original', click: () => {
            actions.revertToOriginal()
        }}))


        this.menu.append(new MenuItem({label: 'Remove cover art', click: () => {
            actions.remove()
        }}))
    }

    popup() {
        this.menu.popup({window: remote.getCurrentWindow()})
    }
}

class TrackMetadataDialog extends Dialog {
    constructor(track, library, config) {
        super()
        this.setTitle("Track info")
        this.setStyle({width:'500px', height:"550px"})
        this.library = library
        this.track = track

        this.audio_player = new RemoteTrackPlayer()
        this.audio_player.addOutput("headphones")
        this.setOutputDeviceId("null")
        this.audio_player.initialize()

        this.coverImageInput = new Image()
        this.coverImageInput.setStyle({
            border: "1px solid black"
        })
        this.coverImageInput.domElement.addEventListener("contextmenu", () => {
            let menu = new CoverArtMenu({
                chooseCover: (newCover) => {
                    Jimp.read(newCover, (error, image) => {
                        if (!error) {
                            this.coverImageInput.setImage(newCover)
                            this.coverImage = image
                            this.coverImageExtension = getFileExtension(newCover)
                        }
                    })
                },
                revertToOriginal: () => {
                    let coverSource;
                    if (this.originalCoverImage == null) {
                        coverSource = "../../resources/images/default_album_cover.png"
                        this.coverImage = undefined
                    } else {
                        coverSource = this.originalCoverImage;
                        this.coverImage = undefined
                    }
                    this.coverImageInput.setImage(coverSource)
                },
                remove: () => {
                    let coverSource;
                    coverSource = "../../resources/images/default_album_cover.png"
                    this.coverImage = null
                    this.coverImageInput.setImage(coverSource)
                }                
            })
            menu.popup()
        })
        this.titleLabel = new Label("title")
        this.titleLabel.setStyle({
            color: 'rgb(30,30,30)',
            fontWeight: "bold",
            fontSize: "11pt",
            textOverflow: 'ellipsis'

        })
        this.artistLabel = new Label("artist")
        this.artistLabel.setStyle({
            color: 'rgb(30,30,30)',
            fontSize: "10pt",
            textOverflow: 'ellipsis'
        })

        this.albumLabel = new Label("album")
        this.albumLabel.setStyle({
            color: 'rgb(30,30,30)',
            fontSize: "10pt",
            textOverflow: 'ellipsis'
        })

        this.ratingInput = new Rating()
        this.favoriteInput = new CustomCheckbox()
        let ratingLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        ratingLayout.append(this.ratingInput, false, true, 75)
        ratingLayout.append(this.favoriteInput, false, true, 15)

        let layout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        let metadataLayout = new BoxLayout("vertical", {left:0, right:0, top:0, bottom:0, padding:5})
        metadataLayout.append(this.titleLabel, false, true, 20)
        metadataLayout.append(this.artistLabel, false, true, 20)
        metadataLayout.append(this.albumLabel, false, true, 20)
        metadataLayout.append(new DOMElement('div'), false, true, 20)
        metadataLayout.append(ratingLayout, false, true, 30)
        layout.append(this.coverImageInput, false, true, 125)
        layout.append(metadataLayout, true, true)


        this.titleInput = new LabeledInput("title")
        this.artistInput = new LabeledInput("artist")
        this.albumInput = new LabeledInput("album")
        this.genreInput = new LabeledInput("genre")
        this.yearInput = new LabeledInput("year")
        this.bpmInput = new LabeledInput("bpm")
        let genreLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        genreLayout.append(this.genreInput, true, true)
        genreLayout.append(this.yearInput, true, true)
        genreLayout.append(this.bpmInput, true, true)



        this.playCountInfo = new LabeledInfo("play count")
        this.lastPlayedInfo = new LabeledInfo("last played")
        this.durationInfo = new LabeledInfo("length")
        let playInfoLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:10})
        playInfoLayout.append(this.playCountInfo, false, true, 75)
        playInfoLayout.append(this.lastPlayedInfo, true, true)
        playInfoLayout.append(this.durationInfo, false, true, 75)



        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let save_button = new ConfirmButton()
        save_button.setText("Save")
        save_button.on("click", async () => {
            this.audio_player.stop()
            let cover_dir = this.library.getCoverFolder()
            let new_values = this.getValues()
            if (this.coverImage != undefined) {
                let image = this.coverImage
                let trackId = this.track._id
                let ext = this.coverImageExtension 
                image.write(`${path.join(cover_dir, `${trackId}_original.${ext}`)}`);
                image.resize(320,320).write(`${path.join(cover_dir, `${trackId}_large.${ext}`)}`)
                image.resize(160,160).write(`${path.join(cover_dir, `${trackId}_medium.${ext}`)}`)
                image.resize(100,100).write(`${path.join(cover_dir, `${trackId}_small.${ext}`)}`)   
                new_values["metadata.cover.original"] =  `${trackId}_original.${ext}`
                new_values["metadata.cover.large"] = `${trackId}_large.${ext}`
                new_values["metadata.cover.medium"] = `${trackId}_medium.${ext}`
                new_values["metadata.cover.small"] = `${trackId}_small.${ext}`
            }
            
            await this.library.tracks.setTrackMetadata(this.track, new_values)
            if (this.coverImage === null) {
                await this.library.tracks.d.update({_id: this.track._id}, {$unset: {'metadata.cover': true}})
            }
            this.close()
        })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.audio_player.stop()
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)

        this.layout.append(layout, false, true, 125)
        this.layout.append(this.titleInput, false, true, 40)
        this.layout.append(this.artistInput, false, true, 40)
        this.layout.append(this.albumInput, false, true, 40)
        this.layout.append(genreLayout, false, true, 40)
        this.layout.append(playInfoLayout, false, true, 40)
        this.layout.append(new DOMElement("div"), true, true)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])
        this.setTrack(track)
    }

    setOutputDeviceId(deviceId) {
        (deviceId != this.getOutputDeviceId()) && this.audio_player.setOutputDeviceId("headphones", deviceId)
    }

    getOutputDeviceId() {
        return this.audio_player.getOutputDeviceIds()["headphones"]
    }

    async open() {
        super.open()
    }

    getValues() {
        let v = {
            "metadata.title": this.titleInput.getText(), 
            "metadata.album": this.albumInput.getText(),
            'metadata.artist': this.artistInput.getText(), 
            "track.bpm": this.bpmInput.getText(), 
            "metadata.genre": this.genreInput.getText(),
            "metadata.year": this.yearInput.getText(), 
            "stats.loved": this.favoriteInput.getValue() || false,
            "stats.rating": this.ratingInput.getRating() || 0
        }
        v['metadata.year'] = (v['metadata.year'] != "") ? v['metadata.year'] : null
        v['track.bpm'] = (v['track.bpm'] != "") ? v['track.bpm'] : null
        return v
    }


    async setTrack(track) {
        this.track = track
        this.titleLabel.setText(track.metadata.title)
        this.albumLabel.setText(track.metadata.album)
        this.artistLabel.setText(track.metadata.artist)
        this.titleInput.setText(track.metadata.title)
        this.albumInput.setText(track.metadata.album)
        this.artistInput.setText(track.metadata.artist)
        this.bpmInput.setText(track.track.bpm)
        this.genreInput.setText(track.metadata.genre)
        this.yearInput.setText(track.metadata.year)
        this.ratingInput.setRating(track.stats.rating)
        this.favoriteInput.setValue(track.stats.loved)

        this.playCountInfo.setText(track.stats.play_count)
        this.lastPlayedInfo.setText(moment(track.stats.last_played).format("Y-MM-DD h:mm:ss"))
        this.durationInfo.setText(moment(track.track.duration).format("m:ss"))


        let coverSource = undefined
        if (track.metadata.cover == null) {
            coverSource = "../../resources/images/default_album_cover.png"
            this.originalCoverImage = null
            this.coverImage = null
        } else {
            coverSource = `file://${track.metadata.cover.original}`;
            this.originalCoverImage = coverSource
            this.coverImage = undefined
        }
        this.coverImageInput.setImage(coverSource)
    }
}

module.exports = {
    TrackMetadataDialog: TrackMetadataDialog
}