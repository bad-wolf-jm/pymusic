
const { RemoteTrackPlayer } = require("track_playback/remote_player/remote_player.js")
const { DOMElement } = require("ui/dom/domelement.js")
const { ColorPicker } = require("ui/popup/colorpicker.js")
const { ScrollArea } = require("ui/dom/scroll_area.js")
const { Slider } = require("ui/dom/slider.js")
// sconst { Slider } = require("ui/dom/slider.js")
const { Button } = require("ui/dom/button.js")
const { Label } = require("ui/dom/label")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { ClusteredListView } = require('ui/listview/cluster')
const { TextRenderer } = require('ui/listview/renderer')
const WaveSurfer = require("wavesurfer.js")
const WaveSurferRegions = require('wavesurfer.js/dist/plugin/wavesurfer.regions.min.js');
const moment = require('moment');


class WaveformView extends DOMElement {
    constructor() {
        super("div")
        this.setStyle({
            border: "1px solid black"
        })
    }

    load(track) {
        this._waveform = WaveSurfer.create({
            container: `#${this.domElement.id}`,
            waveColor: 'grey',
            progressColor: 'black',
            height: 100,
            barHeight: 1.25,
            plugins: [
                WaveSurferRegions.create({
                    container: `#${this.domElement.id}`,
                    deferInit: false,
                })
            ]
        });
        this._waveform.on(
            "ready", () => {
                this._waveform.zoom(0)
                if (this._region != undefined) {
                    this._waveform.clearRegions()
                }
                this._region = this._waveform.addRegion({
                    start: this.track.track.stream_start / 1000,
                    end:   this.track.track.stream_end / 1000,
                    color: "rgba(25,25,25,0.35)"
                })
                this._region.on("update",
                    () => {
                        this.stream_start = Math.round(this._region.start * 1000)
                        this.stream_end = Math.round(this._region.end * 1000)
                        this.stream_length = this.stream_end - this.stream_start
                        this.dispatch("bounds-changed", this.stream_start, this.stream_end)
                    }
                )
            }
        )
        this._waveform.on(
            "seek", (p) => {
                this.dispatch("seek", p)
                // this.current_stream_position = p
            }
        )
        this.track = track
        let file_name = track.track.path
        this._waveform.load(file_name)
    }

    zoom(v) {
        if (this._waveform) {
            this._waveform.zoom(v)
        }
    }

    seekAndCenter(position) {
        this._waveform && this._waveform.seekAndCenter(position)
    }

}


class TrackClipDialog extends Dialog {
    constructor(track, library, config) {
        super()
        this.setTitle("Clip track")
        this.setStyle({width:'1000px', height:"500px"})
        this.library = library
        this.track = track

        this.audio_player = new RemoteTrackPlayer()
        this.audio_player.addOutput("headphones")
        this.setOutputDeviceId("null")
        this.audio_player.initialize()
        this.audio_player.on("stream-position", (pos) => {
            try {
                this.waveform.seekAndCenter(pos.position / this.track.track.duration)
            } catch (e) {

            }
        })

        this.streamStart = this.track.track.stream_start
        this.streamEnd = this.track.track.stream_end

        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let title = new Label(this.track.metadata.title)
        title.setStyle({
            fontSize: "12pt",
            fontWeight: "bold",
            color:"rgb(30,30,30)"
        })
        let artist = new Label(this.track.metadata.artist)
        artist.setStyle({
            color:"rgb(30,30,30)"
        })

        this.waveform = new WaveformView()
        this.waveform.on("bounds-changed", (start, end) => {
            this.streamStart = start
            this.streamEndd = end
            streamStartInput.setText(moment(start).format("m:ss"))
            streamEndInput.setText(moment(end).format("m:ss"))
        })
        this.waveform.on("seek", (pos) => {
            this.currentStreamPosition = pos
        })

        let playLayout =  new BoxLayout("horizontal", {left:0, right:0, top:20, bottom:20, padding:10})
        let playButton = new Button()
        playButton.setStyle({
            float:'left', 
            width:'35px', 
            height:'35px', 
            borderRadius:'25px', 
            border:'1px solid gray', 
            backgroundColor:'rgb(35,35,35)'
        })
        playButton.setText(`<i class="fa fa-play" style="text-align:center; font-size:12pt"></i>`)
        playButton.on("click", () => {
            let start;
            if (this.audio_player.state == "PLAYING") {
                this.audio_player.stop()
                this.currentStreamPosition = null
            } else {
                if (this.currentStreamPosition != null) {
                    start = this.currentStreamPosition * this.track.track.duration
                } else {
                    start = this.streamStart
                }
                if (this.streamEnd == Infinity) {
                    this.audio_player.play(this.track, start, this.track.track.stream_end)
                } else {
                    this.audio_player.play(this.track, start, this.streamEnd)
                }
            }
        })
        playLayout.append(playButton)


        let zoomSlider = new Slider()
        zoomSlider.setBounds(1, 200)
        zoomSlider.setValue(1)
        zoomSlider.setStyle({})
        zoomSlider.on("value-changed", (v) => {
            var zoomLevel = Number(v);
            this.waveform.zoom(zoomLevel);
        })
            
        playLayout.append(zoomSlider, true, true)

        let streamStartLabel = new Label("Start")
        streamStartLabel.setStyle({
            textTransform:"uppercase",
            color:"rgb(30,30,30)"
        })

        let streamStartInput = new Label("0:00")
        streamStartInput.setStyle({
            color:"rgb(30,30,30)",
            fontWeight: "bold",

        })
        streamStartInput.setText(moment(this.streamStart).format("m:ss"))

        let streamStartLayout = new BoxLayout("vertical", {left:0, right:0, top:0, bottom:0, padding:5})
        streamStartLayout.append(streamStartLabel, true, true)
        streamStartLayout.append(streamStartInput, true, true)
        
        let streamEndLabel = new Label("END")
        streamEndLabel.setStyle({
            textTransform:"uppercase",
            textAlign: "right",
            color:"rgb(30,30,30)"
        })

        let streamEndInput = new Label("0:00")
        streamEndInput.setStyle({
            color:"rgb(30,30,30)",
            textAlign: "right",
            fontWeight: "bold",

        })
        streamEndInput.setText(moment(this.streamEnd).format("m:ss"))

        let streamEndLayout = new BoxLayout("vertical", {left:0, right:0, top:0, bottom:0, padding:5})
        streamEndLayout.append(streamEndLabel, true, true)
        streamEndLayout.append(streamEndInput, true, true)

        let streamBoundsLayout = new BoxLayout("horizontal", {left:0, right:0, top:0, bottom:0, padding:0})
        streamBoundsLayout.append(streamStartLayout, false, true, 100)
        streamBoundsLayout.append(new DOMElement("div"), true, true, 100)
        streamBoundsLayout.append(streamEndLayout, false, true, 100)

        let save_button = new ConfirmButton()
        save_button.setText("Save")
        save_button.on("click", async () => {
            let newBounds = {
                "track.stream_start": this.streamStart || 0,
                "track.stream_end": this.streamEnd || this.track.track.duration
            }
            await this.library.tracks.setTrackMetadata(this.track, newBounds)
            this.audio_player.stop()
            this.close()
        })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.audio_player.stop()
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)

        this.layout.append(title, false, false)
        this.layout.append(artist, false, true, 30)
        this.layout.append(this.waveform, false, true, 100)
        this.layout.append(streamBoundsLayout, false, true, 30)
        this.layout.append(playLayout, false, true, 100)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])
    }

    setOutputDeviceId(deviceId) {
        (deviceId != this.getOutputDeviceId()) && this.audio_player.setOutputDeviceId("headphones", deviceId)
    }

    getOutputDeviceId() {
        return this.audio_player.getOutputDeviceIds()["headphones"]
    }


    async open() {
        super.open()
        this.waveform.load(this.track)
    }
}

module.exports = {
    TrackClipDialog: TrackClipDialog
}