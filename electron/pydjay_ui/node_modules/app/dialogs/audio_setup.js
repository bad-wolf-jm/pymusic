const { Dialog } = require("ui/dialog/dialog")
const { AudioOutputDetector } = require("webaudio/detect.js")
const { DOMElement } = require("ui/dom/domelement.js")
const { Button } = require("ui/dom/button.js")
const { DismissButton } = require("ui/dialog/buttons.js")


class FramedBox extends DOMElement {
    constructor() {
        super("div")
        this.setStyle({
            borderRadius:"5px",
            backgroundColor:"rgb(185,185,185)",
            width: "calc(100% - 40px)",
            height: "75px",
            margin: "20px",
            border: "1px solid black"
        })

        this.head = new DOMElement('div')
        this.head.setStyle({
            borderRadius: "5px 5px 0 0",
            textTransform: "uppercase",
            backgroundColor: "rgb(135,135,135)",
            color: "rgb(235,235,235)",
            width: "calc(100%)",
            height: "25px",
            border: "0px solid black",
            textAlign: "center",
            lineHeight: "25px"

        })
        this.appendChild(this.head)
        
        this.body = new DOMElement("div")
        this.body.setStyle({
            padding: "10px",
            width: "calc(100% - 20px)",
            height: "calc(100% - 45px)",
            border: "0px solid black",
        })
        this.appendChild(this.body)
    }

    setTitle(title) {
        this.head.domElement.innerHTML = title
    }
}


class LabeledSelection extends DOMElement {
    constructor(label_text) {
        super("div")
        this.setStyle({
            display: 'block',
            paddingTop: '5px',
            paddingBottom: '5px'
        })
        let label = new DOMElement("div")
        label.setStyle({
            color: "rgb(30,30,30)",
            height: "100%",
            float: "left",
            marginRight: '5px',
        })
        label.domElement.innerHTML = label_text
        this.selection = new DOMElement("select")
        this.appendChildren([label, this.selection])
        this.selection.domElement.addEventListener("change", () => {
            this.dispatch("change", this.selection.domElement.value)
        })
    }

    setOptions(options) {
        console.log(options)
        options.forEach((d) => {
            let option = new DOMElement("option")
            option.domElement.value = d.value
            option.domElement.text = d.label
            option.domElement.disabled = d.disable
            this.selection.domElement.add(option.domElement)
        })
    }

    setValue(value) {
        this.selection.domElement.value = value
    }
}


class AudioOutputSettings extends Dialog {
    constructor(config) {
        super()
        this.setTitle("Audio output settings")
        this.setStyle({width:'500px', height:"400px"})

        let master_settings = new FramedBox()
        master_settings.setTitle("master")
        master_settings.setStyle({height:"100px"})
        this.main_output_setting = new LabeledSelection("Main output:")
        this.headset_output_setting = new LabeledSelection("Headset output:")
        master_settings.body.appendChildren([this.main_output_setting, this.headset_output_setting])

        let prelisten_settings = new FramedBox()
        prelisten_settings.setTitle("pre-listen")
        this.prelisten_output_setting = new LabeledSelection("Output:")
        prelisten_settings.body.appendChild(this.prelisten_output_setting)
        this.appendChild(master_settings)
        this.appendChild(prelisten_settings)

        let div = new DismissButton()
        div.setText("close")
        div.on("click", () => {
            this.close()
        })
        this.appendChild(div)

        this.config = config

        this.masterOutputChange = config.masterOutputChange
        this.masterHeadphoneChange = config.masterHeadphoneChange
        this.prelistenOutputChange = config.prelistenOutputChange
    }

    async open() {
        let output_detector = new AudioOutputDetector()
        let audio_devices = await output_detector.getAudioOutputDevices()
        let saved_audio_devices = await this.config.library.getAudioDevices()
        let audio_setup = await this.config.library.getAudioSetup()
        let audio_options = Object.keys(saved_audio_devices).map((k) => {
            return {
                value: k,
                label: saved_audio_devices[k],
                disable: (audio_devices[k] == undefined) ? 'disabled' : undefined
            }
        })

        audio_options.sort((x,y) => {return x.label.localeCompare(y.label)})
        audio_options.splice(0, 0, {value:'null', label:"Disabled"})

        this.main_output_setting.setOptions(audio_options)
        this.main_output_setting.setValue(audio_setup.main_master || "null")

        this.headset_output_setting.setOptions(audio_options)
        this.headset_output_setting.setValue(audio_setup.main_headset || "null")

        this.prelisten_output_setting.setOptions(audio_options)
        this.prelisten_output_setting.setValue(audio_setup.prelisten || "null")


        this.main_output_setting.on("change", (deviceId) => {
            if (this.masterOutputChange != undefined) {
                this.masterOutputChange(deviceId)
            }
        })
        this.headset_output_setting.on("change", (deviceId) => {
            if (this.masterHeadphoneChange != undefined) {
                this.masterHeadphoneChange(deviceId)
            }
        })
        this.prelisten_output_setting.on("change", (deviceId) => {
            if (this.prelistenOutputChange != undefined) {
                this.prelistenOutputChange(deviceId)
            }
        })
        super.open()
    }
}

module.exports = {
    AudioOutputSettings: AudioOutputSettings
}