const { DOMElement } = require("ui/dom/domelement.js")
const { ScrollArea } = require("ui/dom/scroll_area.js")
const { TextInput } = require("ui/dom/text_input.js")
const { Button } = require("ui/dom/button.js")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { DismissButton } = require("ui/dialog/buttons.js")
const { ClusteredListView } = require('ui/listview/cluster')
const { TextRenderer, ImageRenderer } = require('ui/listview/renderer')
const { AudioTrackPlayer } = require("track_playback/track_player")
const { YoutubeDownloadDialog }  = require("app/dialogs/youtube_download")
const YouTube = require('youtube-node');
const ytdl = require('ytdl-core');
const moment = require("moment")

class ResultListView extends ClusteredListView {
    constructor(model, body, scroller) {
        super(body, scroller)

        this.setupColumnRenderers()
        this._objectid_to_row_id = {}
        this.model = model
    }

    convert_tag(tag_element) {
        return tag_element 
    }

    setupColumnRenderers() {
        this.addColumnRenderer(new ImageRenderer({
            width: "75px",
            height: "75px",
            src: (obj) => {return `${obj.thumbnail}`}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "450px",
            maxWidth: "450px",
            color: (obj) => {return "rgb(40,40,40)"},
            text: (obj) => {return `<b>${obj.title}</b>
                                    <p style="margin-top: 2px; margin-bottom: 2px; white-space: normal !important; width: 450px; font-size: 9pt; line-clamp:2; text-align: justify">
                                        ${obj.description}
                                    </p>
                                    <p style="margin-top: 10px; margin-bottom: 0px; font-size: 9pt">
                                        <i>Published:</i> ${moment(obj.publishedAt).format("Y-MM-D")}
                                    </p>`}
        }))


        this.addColumnRenderer(new TextRenderer({
            width: "50px",
            fontSize: "15pt",
            textAlign: "center",
            class: (x) => {return "in-table-button"},
            id: (rowId, columnId) => {
                return `${this._viewId}-preview-${rowId}`
            },
            color: (obj) => {return "rgb(100,100,100)"},
            text: (obj) => {return `<i class="fa fa-play"></i>`}
        }))


        this.addColumnRenderer(new TextRenderer({
            width: "50px",
            fontSize: "15pt",
            textAlign: "center",
            class: (x) => {return "in-table-button"},
            id: (rowId, columnId) => {
                return `${this._viewId}-download-${rowId}`
            },
            color: (obj) => {return "rgb(100,100,100)"},
            text: (obj) => {return `<i class="fa fa-download"></i>`}
        }))
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.closest("td").id
        let rating_regex = new RegExp(`${this._viewId}-edit-([_a-zA-Z0-9]+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            this.beginEdit(tableRow.id)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-preview-([_a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("tag-preview-clicked", trackObject.id, eventElementId)
            e.preventDefault()
            return;
        }

        let color_regex = new RegExp(`${this._viewId}-download-([_a-zA-Z0-9]+)`)
        matches = color_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch('tag-download-clicked', trackObject.id, eventElementId)
            e.preventDefault()
            return;
        }
    }

    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    appendList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        let rowIds = this.appendRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })

    }

    endOfTable() {
        this.dispatch("next-page")
    }
}


class YoutubeSearchDialog extends Dialog {
    constructor(library, config) {
        super()
        this.setTitle("Youtube search")
        this.setStyle({width:'700px', height:"900px"})
        this.library = library
        this.player = new AudioTrackPlayer()
        this.player.addOutput("headphones")
        this.setOutputDeviceId("null")

        // this.player.on("stream-position", (p) => {
        //     console.log(p, this.player.source.duration)
        // })

        this.player.on("playback-paused", () => {
            if (this.currentPreviewCell) {
                this.currentPreviewCell.innerHTML = `<i class="fa fa-play"></i>`
            }
        })

        this.player.on("playback-started", () => {
            if (this.currentPreviewCell) {
                this.currentPreviewCell.innerHTML = `<i class="fa fa-pause"></i>`
            }
        })

        this.player.on("playback-stopped", () => {
            if (this.currentPreviewCell) {
                this.currentPreviewCell.innerHTML = `<i class="fa fa-play"></i>`
            }
        })


        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let newTagNameInput = new TextInput()
        newTagNameInput.domElement.addEventListener("keypress", (e) => {
            if (e.key == "Enter") {
                this.doSearch(newTagNameInput.domElement.value)
            }
        })

        let addNewTagButton = new Button()
        addNewTagButton.setText("Search...")
        addNewTagButton.on("click", () => {
            this.doSearch(newTagNameInput.domElement.value)
        })

        let newTagInput = new BoxLayout('horizontal')
        newTagInput.append(newTagNameInput, true, true)
        newTagInput.append(addNewTagButton, false, true, 70)

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.player.stop()
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        button_layout.append(dismiss_button, true, true)
        

        let tagListScroller = new ScrollArea()
        tagListScroller.domElement.classList.add("grid-table-scroller")
        tagListScroller.setStyle({
            overflow: null,
            overflowY: "auto"
        })
        let tagListTable = new DOMElement("table")
        tagListTable.domElement.classList.add("grid-table")
        let tagListBody = new DOMElement('tbody')
        tagListTable.appendChild(tagListBody)
        this._listview = new ResultListView(this, tagListBody.domElement, tagListScroller.domElement)
        tagListScroller.appendChild(tagListTable)

        this._listview.on("tag-name-edited", (newValues) => {
            this.updateValues(newValues)
        })

        this._listview.on("tag-preview-clicked", (id, cellId) => {
            if (this.currentPreview != id) {
                this.player.stop()
            } else {
                this.player.togglePause()
                return;
            }

            let tableCell = document.getElementById(cellId)
            tableCell.innerHTML = `<div class="loader" style="text-align: center !important; height: 20px; width: 20px; margin:0px; padding:0px"></div>`
            ytdl.getInfo(id, (err, info) => {
                if (err) throw err;
                let { formats } = info
                let audioFormats = ytdl.filterFormats(formats, 'audioonly');
                if (audioFormats.length > 0) {
                    this.currentPreview = id
                    this.currentPreviewCell = tableCell
                    this.player.playUrl(audioFormats[0].url, 0)
                }
              });
        })

        this._listview.on("tag-download-clicked", (id, cellId) => {

            let tableCell = document.getElementById(cellId)
            tableCell.innerHTML = `<div class="loader" style="text-align: center !important; height: 20px; width: 20px; margin:0px; padding:0px"></div>`

            let stream = ytdl(id, {
                quality: 'highestaudio',
                filter: 'audioonly',
            });
            stream.on("info", (infoData) => {
                let downloadDialog = new YoutubeDownloadDialog(id, stream, undefined, this.library)
                let { media, thumbnail_url, length_seconds } = infoData
                downloadDialog.coverImageInput.setImage(thumbnail_url)
                downloadDialog.titleInput.setText(media.song)
                downloadDialog.artistInput.setText(media.artist)
                downloadDialog.albumInput.setText(media.album)
                downloadDialog.durationInfo.setText(moment(length_seconds*1000).format("m:ss"))
                downloadDialog.ratingInput.setRating(0)
                downloadDialog.favoriteInput.setValue(false)
                this.player.stop()
                tableCell.innerHTML = `<i class="fa fa-download"></i>`
                downloadDialog.open()    
            })
        })


        this._listview.on("next-page", () => {
            this.nextPage()
        })

        this.layout.append(newTagInput, false, true, 30)
        this.layout.append(tagListScroller, true, true)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])
    }

    setOutputDeviceId(deviceId) {
        (deviceId != this.getOutputDeviceId()) && this.player.setOutputDeviceId("headphones", deviceId)
    }

    getOutputDeviceId() {
        return this.player.getOutputDeviceIds()["headphones"]
    }


    doSearch(text) {
        if (text != "") {
            this.searchText = text
            let youTube = new YouTube();
            let youtubeResults = []
            this.nextPageToken = undefined
            this.allowedPages = 5
            youTube.setKey('AIzaSyAZ1QneYwqT_jyYEkWvcdRsnBGedTHlzqg');
            youTube.addParam('type', 'video');
            youTube.search(text, 50, (error, result) => {
                if (error) {
                    console.log(error);
                    this.allowedPages = undefined
                }
                else {
                    let { items, nextPageToken } = result
                    this.nextPageToken = nextPageToken
                    items.forEach((i) => {
                        let data = {
                            id: i.id.videoId,
                            title: i.snippet.title,
                            description: i.snippet.description,
                            date: i.snippet.publishedAt,
                            thumbnail: i.snippet.thumbnails.default.url
                        }
                        youtubeResults.push(data)
                    })
                    this._listview.setList(youtubeResults)
                }
              });
        }
    }

    nextPage() {
        let youTube = new YouTube();
        let youtubeResults = []
        if (this.allowedPages) {
            this.allowedPages--
            if (this.allowedPages == 0) {
                this.allowedPages = undefined
                return
            } 
        }
        youTube.setKey('AIzaSyAZ1QneYwqT_jyYEkWvcdRsnBGedTHlzqg');
        youTube.addParam('type', 'video');
        youTube.search(this.searchText, 50, {pageToken: this.nextPageToken}, (error, result) => {
            if (error) {
              console.log(error);
            }
            else {

                let { items, nextPageToken } = result
                this.nextPageToken = nextPageToken
                items.forEach((i) => {
                    let data = {
                        id: i.id.videoId,
                        title: i.snippet.title,
                        description: i.snippet.description,
                        date: i.snippet.publishedAt,
                        thumbnail: i.snippet.thumbnails.default.url
                    }
                    youtubeResults.push(data)
                })
                this._listview.appendList(youtubeResults)
            }
          });
 
    }

    async init() {
        // this._tagObjects = await MDB.tags.getAllObjects()
        // this._listview.setList(Object.values(this._tagObjects))
    }

    async open() {
        super.open()
    }
}

module.exports = {
    YoutubeSearchDialog: YoutubeSearchDialog
}