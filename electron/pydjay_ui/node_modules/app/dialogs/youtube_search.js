const { DOMElement } = require("ui/dom/domelement.js")
const { ColorPicker } = require("ui/popup/colorpicker.js")
const { ScrollArea } = require("ui/dom/scroll_area.js")
const { TextInput } = require("ui/dom/text_input.js")
const { Button } = require("ui/dom/button.js")
const { Dialog } = require("ui/dialog/dialog.js")
const { BoxLayout } = require("ui/layout/box")
const { ConfirmButton, DismissButton } = require("ui/dialog/buttons.js")
const { ClusteredListView } = require('ui/listview/cluster')
const { TextRenderer, ImageRenderer } = require('ui/listview/renderer')
const { AudioTrackPlayer } = require("track_playback/track_player")
const YouTube = require('youtube-node');
const ytdl = require('ytdl-core');

class ResultListView extends ClusteredListView {
    constructor(model, body, scroller) {
        super(body, scroller)

        this.setupColumnRenderers()
        this._objectid_to_row_id = {}
        this.model = model
    }

    convert_tag(tag_element) {
        return tag_element 
        // {
        //     id: tag_element._id,
        //     name: tag_element.name,
        //     color: tag_element.color
        // }
    }

    // setDimmedRows(idList) {
    //     let rowIdList = idList.map((x) => {
    //         return this._objectid_to_row_id[x]
    //     }).filter((x) => {
    //         return x
    //     })
    //     super.setDimmedRows(rowIdList)
    // }

    setupColumnRenderers() {
        // this.addColumnRenderer({
        //     _config: {}, 
        //     render: (row, col, tag) => {
        //         return `<td  id='${this._viewId}-color-${tag.id}' style="width:25px; text-align:center">
        //             <button class="main-list color-chooser show-color-picker" style="background-color:${tag.color}"></button>
        //         </td>`
        // }})
        this.addColumnRenderer(new ImageRenderer({
            width: "75px",
            height: "75px",
            src: (obj) => {return `${obj.thumbnail}`}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "450px",
            maxWidth: "450px",
            color: (obj) => {return "rgb(40,40,40)"},
            text: (obj) => {return `<b>${obj.title}</b>
                                    <p style="margin-top: 2px; margin-bottom: 2px; white-space: normal !important; width: 450px; font-size: 9pt; line-clamp:2; text-align: justify">
                                        ${obj.description}
                                    </p>
                                    <p style="margin-top: 10px; margin-bottom: 0px; font-size: 9pt">
                                        <i>Published:</i> ${moment(obj.publishedAt).format("Y-MM-D")}
                                    </p>`}
        }))


        this.addColumnRenderer(new TextRenderer({
            width: "50px",
            fontSize: "15pt",
            textAlign: "center",
            id: (rowId, columnId) => {
                return `${this._viewId}-preview-${rowId}`
            },
            color: (obj) => {return "rgb(100,100,100)"},
            text: (obj) => {return `<i class="fa fa-play"></i>`}
        }))


        this.addColumnRenderer(new TextRenderer({
            width: "50px",
            fontSize: "15pt",
            textAlign: "center",
            id: (rowId, columnId) => {
                return `${this._viewId}-download-${rowId}`
            },
            color: (obj) => {return "rgb(100,100,100)"},
            text: (obj) => {return `<i class="fa fa-download"></i>`}
        }))

        // this.addColumnRenderer(new TextRenderer({
        //     width: "25px",
        //     textAlign:"center",
        //     id: (rowId, columnId) => {
        //         return `${this._viewId}-remove-${rowId}`
        //     },
        //     color: (obj) => {return "rgb(158,28,28)"},
        //     text: (obj) => {return `<i class="fa fa-trash"></i>`}
        // }))
    }


    // async handleEditKeypress(e) {
    //     let new_name = this.editValues['name'].value
    //     if ((new_name == this.oldName) || (this.model.checkNameAvailability(new_name))) {
    //         this.editValues['name'].style.color = null
    //     } else {
    //         this.editValues['name'].style.color = "#dd0000"
    //     }
    //     e.preventDefault()
    // }

    // beginEdit(id) {
    //     let rowId = super.beginEdit(id)
    //     this.editId = this._elements.getElementById(rowId).id
    //     this.oldName = this._elements.getElementById(rowId).name
    // }

    // async saveEdit() {
    //     let values = super.saveEdit()
    //     this.dispatch("tag-name-edited", {
    //         _id: this.editId,
    //         name: values.name
    //     })
    // }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.closest("td").id
        let rating_regex = new RegExp(`${this._viewId}-edit-([_a-zA-Z0-9]+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            this.beginEdit(tableRow.id)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-preview-([_a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("tag-preview-clicked", trackObject.id)
            e.preventDefault()
            return;
        }

        let color_regex = new RegExp(`${this._viewId}-download-([_a-zA-Z0-9]+)`)
        matches = color_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch('tag-download-clicked', trackObject.id, e)
            e.preventDefault()
            return;
        }
    }

    // compare_tags(a, b) {
    //     if (!a.name) { return -1 }
    //     if (!b.name) { return 1 }
    //     let x = a.name.toLowerCase();
    //     let y = b.name.toLowerCase();
    //     if (x < y) { return -1; }
    //     if (x > y) { return 1; }
    //     return 0;        
    // }    

    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    appendList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        let rowIds = this.appendRows(list_elements.map((e) => {
            return this.convert_tag(e)
        }))

        // this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })

    }

    endOfTable() {
        this.dispatch("next-page")
    }
    // updateElement(tagObject) {
    //     let element = this.convert_tag(tagObject)
    //     let rowId = this._objectid_to_row_id[element.id]
    //     super.updateElement(rowId, element)
    //     let row = this._row_elements.getElementById(rowId)
    //     if (row) {
    //         row.innerHTML = this.renderRow(rowId, element)
    //     }
    // }
}


class YoutubeSearchDialog extends Dialog {
    constructor(library, config) {
        super()
        this.setTitle("Youtube search")
        this.setStyle({width:'700px', height:"900px"})
        this.library = library
        this.player = new AudioTrackPlayer()
        this.player.addOutput("headphones")
        this.setOutputDeviceId("null")
        // this.player.initialize()

        // this._tagsList = []
        // this._tagNames = {}
        // this._tagObjects = {}
        // this._tagsToRemove = {}
        // this._tagsToAdd = {}
        // this._tagsToUpdate = {}

        this.layout = new BoxLayout("vertical", {left:20, right:20, top:20, bottom:20, padding:10})
        this.layout.setStyle({
            position: "absolute",
            top: '0px',
            width: "100%",
            height: "100%"
        })

        let newTagNameInput = new TextInput()
        newTagNameInput.domElement.addEventListener("keypress", (e) => {
            if (e.key == "Enter") {
                this.doSearch(newTagNameInput.domElement.value)
            }
        })

        let addNewTagButton = new Button()
        addNewTagButton.setText("Search...")
        addNewTagButton.on("click", () => {
            this.doSearch(newTagNameInput.domElement.value)
            // if (newTagNameInput.domElement.value != "") {
            //     let youTube = new YouTube();
            //     let youtubeResults = []
            //     youTube.setKey('AIzaSyAZ1QneYwqT_jyYEkWvcdRsnBGedTHlzqg');
            //     youTube.addParam('type', 'video');
            //     youTube.search(newTagNameInput.domElement.value, 50, (error, result) => {
            //         if (error) {
            //           console.log(error);
            //         }
            //         else {
            //             let { items } = result
            //             console.log(result)                        
            //             items.forEach((i) => {
            //                 let data = {
            //                     id: i.id.videoId,
            //                     title: i.snippet.title,
            //                     description: i.snippet.description,
            //                     date: i.snippet.publishedAt,
            //                     thumbnail: i.snippet.thumbnails.default.url
            //                 }
            //                 youtubeResults.push(data)
            //             })
            //             this._listview.setList(youtubeResults)
            //         }
            //       });
            // }
        })

        let newTagInput = new BoxLayout('horizontal')
        newTagInput.append(newTagNameInput, true, true)
        newTagInput.append(addNewTagButton, false, true, 70)

        // let save_button = new ConfirmButton()
        // save_button.setText("Save")
        // save_button.on("click", () => {
        //     this.player.stop()
        //     this.close()
        //     // Object.values(this._tagsToAdd).filter((x) => {
        //     //     return !(this._tagsToRemove[x._id])
        //     // }).forEach(async (newTag) => {
        //     //     await this.library.createTag(newTag.name, newTag.color)
        //     // })
        //     // Object.keys(this._tagsToRemove).filter((k) => {
        //     //     return this._tagsToRemove[k]
        //     // }).forEach(async (k) => {
        //     //     await this.library.removeTag(k)
        //     // })
        //     // Object.values(this._tagsToUpdate).forEach(async (k) => {
        //     //     await this.library.updateTag(k._id, k.name, k.color)
        //     // })
        //     // this.close()
        // })

        let dismiss_button = new DismissButton()
        dismiss_button.setText("Close")
        dismiss_button.on("click", () => {
            this.player.stop()
            this.close()
        })

        let button_layout = new BoxLayout("horizontal", {padding: 20})
        // button_layout.append(save_button, true, true)
        button_layout.append(dismiss_button, true, true)
        

        let tagListScroller = new ScrollArea()
        tagListScroller.setStyle({
            overflow: null,
            overflowY: "auto"
        })
        let tagListTable = new DOMElement("table")
        let tagListBody = new DOMElement('tbody')
        tagListTable.appendChild(tagListBody)
        this._listview = new ResultListView(this, tagListBody.domElement, tagListScroller.domElement)
        tagListScroller.appendChild(tagListTable)

        // this._listview.on("tag-color-clicked", (tagId, e) => {
        //     let colorPicker = new ColorPicker(this.domElement, {
        //         cancel: () => {
        //             colorPicker.close()
        //         },
        //         chooseColor: (color) => {
        //             this.updateValues({
        //                 _id: tagId,
        //                 color: color
        //             })
        //             colorPicker.close()
        //         }                    
        //     })
        //     colorPicker.open(e.target)
        // })

        this._listview.on("tag-name-edited", (newValues) => {
            this.updateValues(newValues)
        })

        this._listview.on("tag-preview-clicked", (id) => {
            ytdl.getInfo(id, (err, info) => {
                if (err) throw err;
                let { formats } = info
                let audioFormats = ytdl.filterFormats(formats, 'audioonly');
                console.log(audioFormats)
                if (audioFormats.length > 0) {
                    console.log(audioFormats[0].url)
                    this.player.playUrl(audioFormats[0].url, 0)
                }
                // let format = ytdl.chooseFormat(info.formats, { quality: '134' });
                // if (format) {
                //   console.log('Format found!');
                // }
              });

            // if (this._tagsToRemove[id]) {
            //     this._tagsToRemove[id] = false
            // } else {
            //     this._tagsToRemove[id] = true
            // }
            // this._listview.setDimmedRows(Object.keys(this._tagsToRemove).filter((x) => {
            //     return this._tagsToRemove[x]
            // }))

        })

        this._listview.on("next-page", () => {
            this.nextPage()
        })

        this.layout.append(newTagInput, false, true, 30)
        this.layout.append(tagListScroller, true, true)
        this.layout.append(button_layout, false, true, 50)
        this.appendChildren([this.layout])
    }

    setOutputDeviceId(deviceId) {
        (deviceId != this.getOutputDeviceId()) && this.player.setOutputDeviceId("headphones", deviceId)
    }

    getOutputDeviceId() {
        return this.player.getOutputDeviceIds()["headphones"]
    }


    doSearch(text) {
        if (text != "") {
            this.searchText = text
            let youTube = new YouTube();
            let youtubeResults = []
            this.nextPageToken = undefined
            this.allowedPages = 5
            youTube.setKey('AIzaSyAZ1QneYwqT_jyYEkWvcdRsnBGedTHlzqg');
            youTube.addParam('type', 'video');
            youTube.search(text, 50, (error, result) => {
                if (error) {
                    console.log(error);
                    this.allowedPages = undefined
                }
                else {
                    let { items, nextPageToken } = result
                    this.nextPageToken = nextPageToken
                    items.forEach((i) => {
                        let data = {
                            id: i.id.videoId,
                            title: i.snippet.title,
                            description: i.snippet.description,
                            date: i.snippet.publishedAt,
                            thumbnail: i.snippet.thumbnails.default.url
                        }
                        youtubeResults.push(data)
                    })
                    this._listview.setList(youtubeResults)
                }
              });
        }
    }

    nextPage() {
        let youTube = new YouTube();
        let youtubeResults = []
        if (this.allowedPages) {
            this.allowedPages--
            if (this.allowedPages == 0) {
                this.allowedPages = undefined
                return
            } 
        }
        youTube.setKey('AIzaSyAZ1QneYwqT_jyYEkWvcdRsnBGedTHlzqg');
        youTube.addParam('type', 'video');
        youTube.search(this.searchText, 50, {pageToken: this.nextPageToken}, (error, result) => {
            if (error) {
              console.log(error);
            }
            else {

                let { items, nextPageToken } = result
                this.nextPageToken = nextPageToken
                items.forEach((i) => {
                    let data = {
                        id: i.id.videoId,
                        title: i.snippet.title,
                        description: i.snippet.description,
                        date: i.snippet.publishedAt,
                        thumbnail: i.snippet.thumbnails.default.url
                    }
                    youtubeResults.push(data)
                })
                this._listview.appendList(youtubeResults)
            }
          });
 
    }

    // checkNameAvailability(newName) {
    //     return (!(this._tagNames[newName]) && true) || false
    // }

    // updateValues(newValues) {
    //     if (this._tagsToUpdate[newValues._id]) {
    //         this._tagsToUpdate[newValues._id].name = newValues.name || this._tagsToUpdate[newValues._id].name
    //         this._tagsToUpdate[newValues._id].color = (newValues.color === null) ? null : newValues.color || this._tagsToUpdate[newValues._id].color
    //     } else if (this._tagObjects[newValues._id] && !(this._tagsToAdd[newValues._id])){
    //         this._tagsToUpdate[newValues._id] = {
    //             _id: newValues._id,
    //             name: newValues.name || this._tagObjects[newValues._id].name,
    //             color: (newValues.color === null)  ? null : (newValues.color || this._tagObjects[newValues._id].color)
    //         }
    //     } else if (this._tagsToAdd[newValues._id]) {
    //         this._tagsToAdd[newValues._id].name = newValues.name || this._tagsToAdd[newValues._id].name
    //         this._tagsToAdd[newValues._id].color = (newValues.color === null) ? null : (newValues.color || this._tagsToAdd[newValues._id].color)
    //     } 

    //     if (this._tagObjects[newValues._id]) {
    //         this._tagObjects[newValues._id].name = newValues.name || this._tagObjects[newValues._id].name
    //         this._tagObjects[newValues._id].color = (newValues.color === null) ? null :  (newValues.color || this._tagObjects[newValues._id].color)
    //     }
    //     this._listview.updateElement(this._tagObjects[newValues._id])
    // }

    async init() {
        // this._tagObjects = await MDB.tags.getAllObjects()
        // this._listview.setList(Object.values(this._tagObjects))
    }

    async open() {
        super.open()
    }
}

module.exports = {
    YoutubeSearchDialog: YoutubeSearchDialog
}