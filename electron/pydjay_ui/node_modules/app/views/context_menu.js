const { remote } = require('electron')
const { Menu, MenuItem } = remote


class ContextMenu {
    constructor(track, library) {
        this.track = track
        this.library = library
        this.menu = new Menu()
        this.menu.append(new MenuItem({label: 'Track info', click: () => {
            AppController.stopPrelisten()
            view.set_track(this.track)
            document.getElementById("track-edit-dialog").showModal()
        }}))
        this.menu.append(new MenuItem({type: 'separator'}))
        this.menu.append(new MenuItem({label: 'Shortlist', click: () => {
            this.library.shortlisted_tracks.append(this.track)

        }}))

        this.menu.append(new MenuItem({label: 'Marked as played', click: () => {
            this.library.unavailable_tracks.append(this.track)
        }}))
        this.menu.append(new MenuItem({label: 'Add to queue', click: () => {
            this.library.queue.append(this.track)
        }}))
        this.menu.append(new MenuItem({type:  'separator'}))
        this.menu.append(new MenuItem({label: 'Preview',
            submenu: [
                {label: 'Full track', click: () => {
                    AppController.prelistenTrack(this.track)
                }},
                {label: 'Last 30 seconds', click: () => {
                    AppController.prelistenLast30Seconds(this.track)
                }},
                {label: 'Last 10 seconds', click: () =>{
                    AppController.prelistenLast10Seconds(this.track)
                }}
            ]}))
        this.menu.append(new MenuItem({type: 'separator'}))

        

        this.menu.on("menu-will-show", (e) => {})
        this.menu.on("menu-will-close", (e) => {})
    }

    async popup() {
        let tags = Object.values(await this.library.tags.getAllObjects())
        this.menu.append(new MenuItem({
            label: 'Tags',
            submenu: tags.map((tag) => {
                return {
                    label: tag.name,
                    type: "checkbox",
                    checked: (this.track.metadata.tags.indexOf(tag._id) != -1),
                    click: (e) => {
                        if ( e.checked ) {
                            this.library.tracks.appendTag(this.track, tag)
                        } else {
                            this.library.tracks.removeTag(this.track, tag)
                        }
                        console.log(e.checked, tag._id)
                    }
                }
            })
        }))


        this.menu.popup({window: remote.getCurrentWindow()})
    }

    close() {
        this.menu.closePopup()
    }
}

module.exports = {
    ContextMenu: ContextMenu
}