const { DropdownMenu } = require("app/components/dropdownmenu")
const { PropertySheet } = require("app/components/propertysheet")
const moment = require('moment');


class PrecuePlayerView extends EventDispatcher {
    constructor (track_list_model) {
        super()
        this.track_list_model = track_list_model
        this.controller = undefined

        this.plMenu = document.getElementById("dd-menu")
        this.precueMenuOptions = new DropdownMenu()

        this.noPreview = document.getElementById("no-preview-track")
        this.trackTitleLabel = document.getElementById("precue-player-title")
        this.trackAlbumLabel = document.getElementById("precue-player-album")
        this.trackArtistLabel = document.getElementById("precue-player-artist")
        this.trackGenreLabel = document.getElementById("precue-player-genre")
        this.trackLastPlayedLabel = document.getElementById("precue-player-last-played")
        this.trackPlayCountLabel = document.getElementById("precue-player-play-count")
        this.trackBPMLabel = document.getElementById("precue-player-bpm")
        this.trackDurationLabel = document.getElementById("precue-player-duration")
        this.trackCoverImage = document.getElementById("precue-player-cover")
        this.trackPlayButton = document.getElementById("precue-player-play-button")
        this.trackProgress = document.getElementById("precue-player-track-progress")
        this.trackRating = document.getElementById("precue-player-loved")
        this.trackLoved = document.getElementById("precue-player-rating")

        this.precueMenuOptions.addItem("Play full track", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenTrack(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Play last 30 seconds", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenLast30Seconds(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Play last 10 seconds", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenLast10Seconds(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Stop", () => {
            this.controller.stopPrelisten()
        })

        this.plMenu.appendChild(this.precueMenuOptions.domElement)
        
        this.trackProgress.addEventListener("click", (e) => {
            let x = e.target.getBoundingClientRect()
            let mouseX = (e.clientX - x.left)
            let ratio = mouseX / x.width
            let t = this.controller.getPrelistenTrack()
            if (t != undefined) {
                this.controller.prelistenTrack(t, t.track.stream_start + ((t.track.stream_end - t.track.stream_start) * ratio))
            }
        })

        this.track_list_model.on("object-updated", (track) => {
            if (this._track != undefined) {
                if (track._id == this._track._id) {
                    this.update_track(track)
                }    
            }
        })
    }

    set_controller(controller) {
        this.controller = controller
        this.controller.on("prelisten:stream-position", (pos) => {
            let percent = (pos.position*100 / (pos.duration*1000))
            if (isFinite(percent)) {
                this.trackProgress.value = percent;
            }
        })
        this.controller.on("prelisten:track-finished", this.set_unset.bind(this))
        this.controller.on("prelisten:track-started", this.set_track.bind(this))
        this.controller.on("prelisten:playback-paused", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
        })
        this.controller.on("prelisten:playback-stopped", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
        })
        this.controller.on("prelisten:playback-started", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-pause"></i>`
        })
        this.trackPlayButton.addEventListener('click', () => {
            if ((this.controller.getPrelistenState() == "PAUSED") || (this.controller.getPrelistenState() == "PLAYING")) {
                this.controller.togglePrelistenPause()
            } else {
                if (this.controller.getPrelistenTrack() != undefined) {
                    this.controller.prelistenTrack(this.controller.getPrelistenTrack())
                }
            }
        })
        this.trackLoved.addEventListener("click", () => {
            if (this._track != undefined) {
                this.updateLoved(!this._track.stats.loved)
            }
        })
    }

    set_unset() {
        this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
    }

    update_track(track) {
        let stream_length = (track.track.stream_end - track.track.stream_start);
        this._track = track
        this.trackTitleLabel.innerHTML = track.metadata.title
        this.trackAlbumLabel.innerHTML = track.metadata.album
        this.trackArtistLabel.innerHTML = track.metadata.artist
        this.trackGenreLabel.innerHTML = track.metadata.genre
        this.trackLastPlayedLabel.innerHTML = track.stats.last_played
        this.trackPlayCountLabel.innerHTML = track.stats.play_count
        this.trackBPMLabel.innerHTML = track.track.bpm
        this.trackDurationLabelinnerHTML = `${moment(stream_length).format("m:ss")}`
        this.setRating(track.stats.rating)
        this.setLoved(track.stats.loved)
        let cover_source = undefined
        if (track.metadata.cover == null) {
            cover_source = "../../resources/images/default_album_cover.png"
        } else {
            cover_source = `file://${track.metadata.cover.small}`;
        }
        this.trackCoverImage.src = cover_source
        this.noPreview.style.display = "none"
    }

    setRating (num) {
        let html = "";
        for (let i=1; i<6; i++) {
            html+=`<i id='precue-rating-star-${i}' class='fa ` + ( i <= num ? "fa-star" : "fa-star-o") +`' style='margin-left:3px'></i>`;
        }
        this.trackRating.innerHTML = html
        for (let i=1; i<6; i++) {
            document.getElementById(`precue-rating-star-${i}`).addEventListener('click', () => {
                if (i == 1 && this._track.stats.rating == 1) {
                    this.updateRating(0)
                } else {
                    this.updateRating(i)
                }
            })
        }
    }


    set_track(tr) {
        // console.log(tr)
        this.update_track(tr.track_object)
    }

    setLoved (value){
        var html = "";
        this.loved = value
        html+="<i title='"+value+"' class='fa " + (value ? "fa-heart" : "fa-heart-o") +"'></i>";
        this.trackLoved.innerHTML = html
    }

    updateRating(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.rating': new_value})
        }
    }

    updateLoved(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.loved': new_value})
        }
    }
}


module.exports = {
    PrecuePlayerView: PrecuePlayerView
}