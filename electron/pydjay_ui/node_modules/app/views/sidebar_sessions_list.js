const { ClusteredListView } = require('ui/listview/cluster')
const { ToggleRenderer, RatingRenderer, TextRenderer, NumberRenderer, DateRenderer} = require('ui/listview/renderer')
const $ = require("jquery")


class DetailedTrackListView extends ClusteredListView {
    constructor() {
        super(document.getElementById("main-track-list-body"), document.getElementById("main-track-list-scroller"))
        this.prevWidth = [];
        this.setupColumnRenderers()
        document.getElementById("track-list-header").innerHTML = this.renderHeader()
        this._objectid_to_row_id = {}
    }

    convert_session(track_element) {
        let { metadata, stats, track } = track_element
        return {
            id:   list[i]._id,
            name: list[i].event,
            data: list[i],
            date: list[i].date_start,
        }
    }

    clusterChanged(rows) {
        this.fitHeaderColumns()
    }

    setupColumnRenderers() {
        this.addColumnRenderer(new TextRenderer({
            width: "30px",
            color: (obj) => {return null},
            text: (obj) => {return ""}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "25px",
            color: (obj) => {return null},
            text: (obj) => {return `<i class="fa fa-circle-o arrow-icon"></i>`}
        }))
            
        this.addColumnRenderer(new TextRenderer({
            width: "200px",
            color: (obj) => {return null},
            text: (obj) => {return obj.name}
        }))

        this.addColumnRenderer(new DateRenderer({
            width: "200px",
            dateFormat: "MM-DD-YYYY",
            color: (obj) => {return "rgb(128,128,128)"},
            date: (obj) => {return obj.date}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "25px",
            color: (obj) => {return null},
            text: (obj) => {return `<i class="fa fa-angle-right"></i>`}
        }))
    }

    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        list_elements.sort((a, b) => {return (b.date_start - a.date_start)})
        // if (!this.model_order) {
        // }

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_session(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    handleContextMenu(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("context-menu", trackObject.id)
    }

    handleDragStart(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        e.dataTransfer.setData("text/plain", trackObject.id)
    }

    handleDoubleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-double-click", trackObject.id)
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.id

        let rating_regex = new RegExp(`${this._viewId}-rating-([_a-zA-Z0-9]+)-(\\d+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            let rating_value = parseInt(matches[2])
            this.dispatch("row-rating-clicked", trackObject.id, rating_value)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-loved-([_a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("row-loved-clicked", trackObject.id)
            e.preventDefault()
            return;
        }

        let color_regex = new RegExp(`${this._viewId}-color-([a-zA-Z0-9]+)`)
        matches = color_regex.exec(eventElementId)
        if (matches != undefined) {
            let track_id = matches[1]
            this.dispatch("row-color-clicked", e, trackObject.id)
            e.preventDefault()
            return;
        }

        this.dispatch("row-click", trackObject.id)
        this.selectRow(tableRow.id)
 
    }

    handleEditKeypress(e) {
        if ((e.key == "Alt") && (this.bpmCounter != undefined)) {
            let t = this.bpmCounter.tap()
            let bpm = Math.round(t.avg)
            if (!isNaN(bpm)) {
                this.editValues['bpm'].value = bpm
            }
        }
    }

    beginEdit() {
        let rowId = super.beginEdit()
        this.editTrackId = this._elements.getElementById(rowId).id
        this.bpmCounter = new BPM()
    }

    saveEdit() {
        this.dispatch("row-values-edited", this.editTrackId, super.saveEdit())
        this.bpmCounter = undefined
    }

    updateElement(trackObject) {
        let element = this.convert_track(trackObject)
        let rowId = this._objectid_to_row_id[element.id]
        super.updateElement(rowId, element)
        let row = this._row_elements.getElementById(rowId)
        if (row) {
            row.innerHTML = this.renderRow(rowId, element)
        }
    }

    getSelection() {
        return super.getSelection().map((x) => {
            return this._elements.getElementById(x).id
        })
    }
}


module.exports = {
    DetailedTrackListView: DetailedTrackListView
}