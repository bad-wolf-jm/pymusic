const { ClusteredListView } = require('ui/listview/cluster')
const { SpaceRenderer, ToggleRenderer, RatingRenderer, TextRenderer, NumberRenderer, DateRenderer} = require('ui/listview/renderer')
const $ = require("jquery")
const { remote } = require('electron')
const { Menu, MenuItem } = remote


class ContextMenu {
    constructor(playlist, model, library, display) {
        this.playlist = playlist
        this.model = model
        this.library = library
        this.display = display

        this.menu = new Menu()
        this.menu.append(new MenuItem({label: 'Rename', click: async () => {
            // console.log(this.playlist)
            this.display.beginEdit(this.playlist.id)
        }}))
    }

    popup() {
        this.menu.popup({window: remote.getCurrentWindow()})
    }

    close() {
        this.menu.closePopup()
    }

    async rename_playlist(id, new_name) {
        return await this.model.renamePlaylist(id, new_name)
    }
}


class SessionsListView extends ClusteredListView {
    constructor() {
        super(document.getElementById("session-list-elements"), 
              document.getElementById("sessions-list-scroller"))
        this.prevWidth = [];
        this.setupColumnRenderers()
        this._objectid_to_row_id = {}

        this.forward_content_changed = async (q) => {
            await this.updateContents(q)
        }
    }

    convert_session(track_element) {
        return {
            id:   track_element._id,
            name: track_element.event,
            data: track_element,
            date: track_element.date_start,
        }
    }

    setupColumnRenderers() {
        this.addColumnRenderer(new SpaceRenderer({
            width: "30px",
            color: (obj) => {return null},
            text: (obj) => {return ""}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "25px",
            color: (obj) => {return null},
            text: (obj) => {return `<i class="fa fa-circle-o arrow-icon"></i>`}
        }))
            
        this.addColumnRenderer(new TextRenderer({
            width: "250px",
            editTag: "name",
            color: (obj) => {return null},
            text: (obj) => {return obj.name}
        }))

        this.addColumnRenderer(new DateRenderer({
            width: "100px",
            dateFormat: "MM-DD-YYYY",
            color: (obj) => {return "rgb(128,128,128)"},
            date: (obj) => {return obj.date}
        }))

        this.addColumnRenderer(new TextRenderer({
            width: "25px",
            color: (obj) => {return null},
            text: (obj) => {return `<i class="fa fa-angle-right"></i>`}
        }))
    }

    async updateContents(q) {
        this.setList(q)
    }

    async displayModel(model) {
        if (this.model != undefined) {
            this.model.un("content-changed", this.forward_content_changed) 
        }
        if (model) {
            this.model = model
            this.model.on("content-changed", this.forward_content_changed) 
            this.updateContents(Object.values(await this.model.getAllObjects()))    
        } else {
            this.setList([])
        }
    }


    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        list_elements.sort((a, b) => {return (b.date_start - a.date_start)})

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_session(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    handleContextMenu(e) {
        let tableRow = e.target.closest("tr")
        let sessionObject = this._elements.getElementById(tableRow.id)
        let menu = new ContextMenu(sessionObject, this.model, MDB, this)
        menu.popup()
    }

    handleDragStart(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        e.dataTransfer.setData("text/plain", trackObject.id)
    }

    handleDoubleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-double-click", trackObject.id)
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-click", trackObject.id)
        this.selectRow(tableRow.id)
    }

    handleEditKeypress(e) {

    }

    beginEdit(id) {
        let rowId = super.beginEdit(this._objectid_to_row_id[id])
        this.editId = this._elements.getElementById(rowId).id
    }

    async saveEdit() {
        let values = super.saveEdit()
        await this.model.renameSession(this.editId, values.name)
    }

    updateElement(trackObject) {
        let element = this.convert_track(trackObject)
        let rowId = this._objectid_to_row_id[element.id]
        super.updateElement(rowId, element)
        let row = this._row_elements.getElementById(rowId)
        if (row) {
            row.innerHTML = this.renderRow(rowId, element)
        }
    }

    getSelection() {
        return super.getSelection().map((x) => {
            return this._elements.getElementById(x).id
        })
    }
}


module.exports = {
    SessionsListView: SessionsListView
}