const { SortableListView } = require('ui/listview/sortable')
const { CellRenderer } = require('ui/listview/renderer')
const $ = require("jquery")
const moment = require('moment');



class ElementRenderer extends CellRenderer {
    render(rowId, colId, obj) {
        let style = this._renderStyle(obj)
        let id = this._getValue("id", obj)
        if (id == null) {
            return `<td style="width:100%; margin:0; padding:0">
                <div class="queued-track element eoq" style="background-color:rgb(153,50,204); line-height:50px; vertical-align:middle; text-align:center">
                    <b>END OF QUEUE</b>
                </div>
            </td>`
        } else {
            return `<td style="width:100%; margin:0; padding:0">
                <div class="queued-track element">
                    <img class="cover-image" src="${obj.cover}" height='50' width='50' draggable=false></img>
                    <div style="margin:0px; padding:0px; float:left; width:225px;">
                        <div class="queue_element_title"><b>${obj.title}</b></div>
                        <div class="queue_element_artist"><i>${obj.artist}</i></div>
                    </div>
                    <div style="float:right; width:65px; margin-right:10px; transform: translateY(30%);">
                        <div class="queue_element_bpm">${obj.bpm} BPM</div>
                        <div class="queue_element_duration">
                            <b>${obj.duration ? moment(obj.duration).format("m:ss") : ""}</b>
                        </div>
                    </div>
                </div>
            </td>`
        }
    }
}


class SimpleTrackListView extends SortableListView {
    constructor(scrollerElement, tableBody) {
        super(scrollerElement, tableBody)
        this.tableBody = tableBody
        this.addColumnRenderer(new ElementRenderer({
            id: (obj) => {return obj.id},

            })
        )
    }

    convert_track(x) {
        let element = (x == null) ? {_id: null, duration: 0} : {
            id: x._id,
            title: x.metadata.title,
            artist: x.metadata.artist,
            bpm: x.track.bpm,
            duration: x.track.stream_end - x.track.stream_start,
        }
        if (element.id != null) {
            if (x.metadata.cover == null) {
                element.cover = "../../resources/images/default_album_cover.png"
            } else {
                element.cover = `file://${x.metadata.cover.small}`;
            }
        }
        return element
    }

    listReordered(new_order) {
        this.dispatch("list-reordered", new_order.map((x) => {
            return this._elements.getElementById(x).id
        }))
    }

    setList(list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }
        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_track(e)
        }))
        this.tableBody.innerHTML = this._rendered_rows.getList().join("")
        let elements = document.querySelectorAll(`.${this._viewId}`);
        this.setRowElements(elements)
        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    selectTableElement(id) {
        let e = this.getTableElement(id)    
        if (e != undefined) {
            e = document.querySelector(`#${e.id} > td > div`)
            e.classList.add("selected")
        }
    }

    unselectTableElement(id) {
        let e = this.getTableElement(id)      
        if (e != undefined) {
            e = document.querySelector(`#${e.id} > td > div`)
            e.classList.remove("selected")
        }
    }

    moveSelectedElement(amount) {
        if (this._selection.length() == 1) {
            let selectedId = this._selection.getElementIds()[0]
            let position = this._row_elements.getRowIndex(selectedId)
            if (position != -1) {
                let n = position + amount
                n = Math.max(n, 0)
                n = Math.min(n, this._row_elements.length() - 1) 
                let x = this._row_elements._ordering[position]
                this._row_elements._ordering[position] = this._row_elements._ordering[n]
                this._row_elements._ordering[n] = x
                this.sortable.sort(this._row_elements._ordering)
                this.listReordered(this._row_elements._ordering)
                // this.dispatch("list-reordered", this._row_elements._ordering.map((x) => {
                //     return this._elements.getElementById(x).id
                // }))
            }
        }
    }

    moveSelectionUp() {
        this.moveSelectedElement(-1)
    }

    moveSelectionDown() {
        this.moveSelectedElement(1)
    }

    dispatch(signal, ...x) {
        console.log(signal, x)
        super.dispatch(signal, ...x)
    }


    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-click", trackObject.id)
        this.selectRow(tableRow.id)
 
    }

    handleDoubleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-double-click", trackObject.id)
    }

    handleDragEnter(e) {

    }

    handleDragEnd(e) {

    }

    handleDragOver(evt) {
        if (evt.preventDefault) {
            evt.preventDefault();
        }
        evt.dataTransfer.dropEffect = 'move';
    }

    handleDrop(evt) {
        if (evt.stopPropagation) {
            evt.stopPropagation();
        }
        let track_id = evt.dataTransfer.getData("text/plain")
        this.dispatch("track-dropped", track_id)
    }

    handleContextMenu(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("context-menu", trackObject.id)
    }
}

module.exports = {
    SimpleTrackListView: SimpleTrackListView
}