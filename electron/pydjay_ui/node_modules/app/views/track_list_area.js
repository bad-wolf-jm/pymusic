const { DetailedTrackListView } = require("./detailed_track_list")
const { EventDispatcher } = require("notify/event_dispatcher")
const { TrackSetModel } = require("musicdb/track_set.js")
const { remote } = require('electron')
const { Menu, MenuItem } = remote


class MainTrackListContextMenu {
    constructor(track, library) {
        this.track = track
        this.library = library
        this.menu = new Menu()
        this.menu.append(new MenuItem({label: 'Track info', click: () => {
            pc.stop()
            view.set_track(this.track)
            document.getElementById("track-edit-dialog").showModal()
        }}))
        this.menu.append(new MenuItem({type: 'separator'}))
        this.menu.append(new MenuItem({label: 'Shortlist', click: () => {
            this.library.shortlisted_tracks.append(this.track)

        }}))

        this.menu.append(new MenuItem({label: 'Marked as played', click: () => {
            this.library.unavailable_tracks.append(this.track)
        }}))
        this.menu.append(new MenuItem({label: 'Add to queue', click: () => {
            this.library.queue.append(this.track)
        }}))
        this.menu.append(new MenuItem({type:  'separator'}))
        this.menu.append(new MenuItem({label: 'Preview',
            submenu: [
                {label: 'Full track', click: () => {
                    pc.play(this.track)
                }},
                {label: 'Last 30 seconds', click: () => {
                    pc.play_last_30_seconds(this.track)
                }},
                {label: 'Last 10 seconds', click: () =>{
                    pc.play_last_10_seconds(this.track)
                }}
            ]}))

        this.menu.append(new MenuItem({type: 'separator'}))

        this.menu.on("menu-will-show", (e) => {})
        this.menu.on("menu-will-close", (e) => {})
    }

    popup() {
        this.menu.popup({window: remote.getCurrentWindow()})
    }

    close() {
        this.menu.closePopup()
    }
}


class TrackListAreaController extends EventDispatcher {
    constructor(library) { 
        super()
        this.element = document.getElementById("main-list");
        this._library = library
        this._listview = new DetailedTrackListView()

        this.name_dom = document.getElementById("main-track-list-name");
        this.num_tracks_dom = document.getElementById("main-track-list-number-of-tracks");
        this.duration_dom = document.getElementById( "main-track-list-duration");
        this.filter_dom = document.getElementById("filter-track-list");

        this._library.tracks.on("object-updated", (x) => {
            console.log(x)
            this._listview.updateElement(x)
        })

        this._library.queue.on("content-changed", async () => {
            this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
        })
        this._library.current_session.on("content-changed", async () => {
            this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())    
        })
        this._library.unavailable_tracks.on("content-changed", async () => {
            this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())    
        })
        
        this.filter_dom.oninput = (e) => {
            this.filter_list(this.filter_dom.value)
        }

        this._listview.on("row-click", () => {
            focusWindow(this)
        })

        this._listview.on("context-menu", async (trackId) => {
            let _context_menu = new MainTrackListContextMenu(
                await this._library.tracks.getElementById(trackId),
                this._library)
            _context_menu.popup()
        })

        this._listview.on("row-double-click", async (trackId) => {
            let track = await this._library.tracks.getElementById(trackId)
            pc.play(track)
        })

        this._listview.on("row-rating-clicked", async (trackId, value) => {
            let T = await this._library.tracks.getElementById(trackId)
            await this._library.tracks.setTrackMetadata(T, {"stats.rating": value})
        })

        this._listview.on("row-loved-clicked", async (trackId) => {
            let T = await this._library.tracks.getElementById(trackId)
            await this._library.tracks.setTrackMetadata(T, {"stats.loved": !(T.stats.loved)})
        })
    }

    async displayModel(name, model) {
        let elements = await model.getTracks()
        let numTracks = await model.length()
        let duration = await model.duration()
        this._listview.setList(elements)
        this.name_dom.innerHTML = `${name}`
        this.num_tracks_dom.innerHTML = `${numTracks} tracks`
        this.duration_dom.innerHTML = `${format_seconds_long(duration / 1000)}`
    }

    async display_all_songs() {
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel("All Songs", this._library.tracks)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_current_session() {
        this._listview.ignore_unavailable = true
        this._listview.model_order = true
        await this.displayModel("Current Session", this._library.current_session)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_suggestions() {
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel("Suggested tracks", this._library.suggested)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_short_list() {
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel("Short list", this._library.shortlisted_tracks)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_unavailable() {
        this._listview.ignore_unavailable = true
        this._listview.model_order = false
        await this.displayModel("Unavailable tracks", this._library.unavailable_tracks)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_played_tracks() {
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel("Played songs", this._library.played_tracks)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_never_played_tracks() {
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel("Never Played songs", this._library.never_played_tracks)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_session(id) {
        let pl = await this._library.sessions.getObjectById(id)
        let model = new TrackSetModel(this._library, this._library.sessions, id)
        this._listview.ignore_unavailable = false
        this._listview.model_order = true
        await this.displayModel(pl.event, model)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }
    
    async display_playlist(id) {
        let pl = await this._library.playlists.getObjectById(id)
        let model = new TrackSetModel(this._library, this._library.playlists, id)
        this._listview.ignore_unavailable = false
        this._listview.model_order = false
        await this.displayModel(pl.name, model)
        this._listview.setDimmedRows(await this._library.unavailable.getTrackIds())
    }

    async handle_double_click(e) {
        let x = e.target.closest("tr")
        let track_id = x.attributes["data-track-id"].value
        let track_element = await this.controller.getElementById(track_id)
        // console.log(track_element)
        pc.play(track_element)
    }

    handle_click(e) {
        focusWindow(this)
    }

    focus() {
        this.element.classList.add("focus")
    }

    blur() {
        if (this.edit_mode) {
            this.cancel_edit()
        }
        this.element.classList.remove("focus")
    }

    selected_element() {
        return this.controller.selection[0]
    }


    delete_selection() {

    }

    move_down() {
        this._listview.moveDown()
    }

    move_up() {
        this._listview.moveUp()
    }

    page_up() {
        let y = this.scroller.getBoundingClientRect()
        scroller.scrollTop -= y.height
    }

    page_down() {
        let y = this.scroller.getBoundingClientRect()
        scroller.scrollTop += y.height
    }

    move_last() {
        let e = this.view_list_id_order[this.view_list_id_order.length-1]
        this.ensure_row_visible(e)
        this.controller.select_element(e)
    }

    move_first() {
        let e = this.view_list_id_order[0]
        this.ensure_row_visible(e)
        this.controller.select_element(e)
    }

    set_selected_rating(rating) {
        if (this._selected_row != undefined) {
            let r = this._selected_row[0]
            this.controller.set_metadata(r, {rating:rating})
        }
    }

    toggle_selected_loved() {
        if (this._selected_row != undefined) {
            let r = this._selected_row[0]
            this.controller.set_metadata(r, {favorite: !(r.favorite)})
        }
    }

    add_selection_to_queue() {
        if (this._selected_row != undefined) {
            let r = this._selected_row[0]
            Q.add_element(r)
        }
    }

    add_selection_to_shortlist() {
        this._selected_row.forEach((x) => {
            this.shortlist_controller.append(x)
        })
    }

    add_selection_to_unavailable() {
        this._selected_row.forEach((x) => {
            this.unavailable_controller.append(x)
        })
    }

    remove_selection_from_unavailable() {
        this._selected_row.forEach((x) => {
            this.unavailable_controller.remove(x)
        })
    }

    async filter_list (text) {
        this.list_cluster.update(await super.filter_list(text))
    };
}


module.exports = {
    TrackListAreaController: TrackListAreaController
}