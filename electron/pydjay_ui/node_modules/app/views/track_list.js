const { ClusteredListView } = require('ui/listview/cluster')

class TrackListView extends ClusteredListView {
    constructor(dom_ids, queue_controller, shortlist_controller, unavailable_controller) {
        super(document.getElementById("main-track-list-body"), document.getElementById("main-track-list-scroller"))
        this.setupColumnRenderers()
        this.dom_id = dom_ids.list
        this.prevWidth = [];
    }

    compare_tracks(a, b) {
        let x = a.metadata.title.toLowerCase();
        let y = b.metadata.title.toLowerCase();
        if (x < y) { return -1; }
        if (x > y) { return 1; }
        return 0;        
    }    

    convert_track(track_element) {
        let { metadata, stats, track } = track_element
        return {
            id: track_element._id,
            color: metadata.color,
            title: metadata.title,
            artist: metadata.artist,
            album: metadata.album,
            genre: metadata.genre,
            last_played: (stats.last_played != null) ? moment(stats.last_played).format('MM-DD-YYYY') : "",
            play_count: (stats.play_count != undefined) ? stats.play_count : "",
            duration: track.stream_end - track.stream_start,
            bpm: track.bpm,
            loved: stats.loved,
            rating: stats.rating
        }
    }

    setupColumnRenderers() {
        this.addColumnRenderer((row, col, track) => {
            return `<td style="width:25px; text-align:center">
                <input id='track-color-value-${track.id}' type="hidden" value="" class="main-list-color-value" data-track-id=${track.id}/>
                <button id='${this._viewId}-color-${track.id}' class="main-list color-chooser show-color-picker" style="background-color:${track.color}" data-track-id=${track.id}></button>
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-loved-${track.id}' style="width:25px; padding:5px 3px 5px 3px; text-align:center; font-size:8pt; color:${track.color}">
                ${this._get_loved(track)}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-title-${track.id}' style="max-width:110px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; color:${track.color}">
                ${track.title}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-artist-${track.id}' style="max-width:90px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; color:${track.color}">
                ${track.artist}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-album-${track.id}'style="max-width:90px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; color:${track.color}">
                ${track.album}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-genre-${track.id}' style="max-width:40px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; color:${track.color}">${track.genre}</td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-play-count-${track.id}' style="text-align:right; width:25px; padding-right:9px; color:${track.color}">
                ${track.play_count}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-last-played-${track.id}' style="width:75px; color:${track.color}">
                ${track.last_played}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-rating-${track.id}' style="width:25px">
                ${this._get_rating(track)}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-bpm-${track.id}' style="width:30px; text-align:right; padding-right:5px; color:${track.color}">
                ${track.bpm}
            </td>`})

        this.addColumnRenderer((row, col, track) => {
            return `<td id='track-duration-${track.id}'style="width:45px; text-align:right; color:${track.color}">
                ${format_nanoseconds(track.duration)}
            </td>`})         
    }

    fitHeaderColumns() {
        let $headers = $("#track-list-elements-header")
        let $firstRow = $("#main-track-list-table").find('tr:not(.clusterize-extra-row):first');
        let columnsWidth = [];
        $firstRow.children().each(function () {
            columnsWidth.push($(this).width());
        });
        if (columnsWidth.toString() == this.prevWidth.toString()) return;
        $headers.find('tr').children().each(function(i) {
            $(this).width(columnsWidth[i]);
        });
        this.prevWidth = columnsWidth;
    }

    async set_list(name, list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        if (!this.model_order) {
            list_elements.sort(this.compare_tracks)
        }
        this.setRows(list_elements.map((e) => {
            return this.convert_track(e)
        }))
    }


    set_controller(controller) {
        this.controller = controller
        this.controller.addView(this)
        this.controller.on("content-changed", this.set_list.bind(this))
        this.controller.on("element-updated", this.update_element.bind(this))
        this.controller.on("metadata-changed", this.update_element.bind(this))
    }

    _get_loved(track_object) {
        return `<i id='${this._viewId}-loved-${track_object.id}' title='${track_object.id}' class='fa ${(track_object.loved ? "fa-heart" : "fa-heart-o")}'></i>`
    }

    _get_rating(track_object) {
        let html = "";
        for (let j=1; j<6; j++) {
            html += `<i id='${this._viewId}-rating-${track_object.id}-${j}' class='fa ${( j <= track_object.rating ? "fa-star" : "fa-star-o")}' style='font-size:8pt; margin-left:3px'></i>`;
        }
        return html
    }

    handleContextMenu(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        if (this.contextMenu) {
            this.contextMenu(trackObject.id)
        }
    }

    handleDragStart(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        e.dataTransfer.setData("text/plain", trackObject.id)
    }

    handleDoubleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-double-click", trackObject.id)
    }

    dispatch(signal, ...x) {
        console.log(signal, x)
        super.dispatch(signal, ...x)
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.id

        let rating_regex = new RegExp(`${this._viewId}-rating-([a-zA-Z0-9]+)-(\\d+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            let rating_value = parseInt(matches[2])
            this.dispatch("row-rating-clicked", trackObject.id, rating_value)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-loved-([a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("row-loved-clicked", trackObject.id)
            e.preventDefault()
            return;
        }

        let color_regex = new RegExp(`${this._viewId}-color-([a-zA-Z0-9]+)`)
        matches = color_regex.exec(eventElementId)
        if (matches != undefined) {
            let track_id = matches[1]
            this.dispatch("row-color-clicked", e, trackObject.id)
            e.preventDefault()
            return;
        }

        this.dispatch("row-click", trackObject.id)
        this.selectRow(tableRow.id)
 
    }

    delete_selection() {

    }

    _make_edit_input_field(name, id, old_value) {
        return `<input id="main-track-list-edit-${name}-${id}" type="text" class="new-playlist" value="${old_value}">`
    }

    _keypress (e) {
        if (e.key == "Escape") {
            this.cancel_edit()
        } else if (e.key == "Enter") {
            this.save_edit()
        } else if (e.key == "Alt") {
            if (this.edit_bpm != undefined) {
                let t = this.edit_bpm.tap()
                let bpm = Math.round(t.avg)
                if (!isNaN(bpm)) {
                    document.getElementById(`main-track-list-edit-bpm-${this.edit_row._id}`).value = bpm
                }
            }
        } else {

        }
    }

    begin_edit() {
        if (this._selected_row != undefined) {
            this.edit_mode = true
            let r = this._selected_row[0]
            this.edit_row = r
            this.edit_bpm = new BPM()
            document.getElementById(`track-title-${r._id}`).innerHTML = this._make_edit_input_field("title", r._id, r.metadata.title)
            document.getElementById(`main-track-list-edit-title-${r._id}`).addEventListener("keyup", (e) => {
                this._keypress(e)
            })

            document.getElementById(`track-artist-${r._id}`).innerHTML = this._make_edit_input_field("artist", r._id, r.metadata.artist)
            document.getElementById(`main-track-list-edit-artist-${r._id}`).addEventListener("keyup", (e) => {
                this._keypress(e)
            })

            document.getElementById(`track-album-${r._id}`).innerHTML = this._make_edit_input_field("album", r._id, r.metadata.album)
            document.getElementById(`main-track-list-edit-album-${r._id}`).addEventListener("keyup", (e) => {
                this._keypress(e)
            })

            document.getElementById(`track-genre-${r._id}`).innerHTML = this._make_edit_input_field("genre", r._id, r.metadata.genre)
            document.getElementById(`main-track-list-edit-genre-${r._id}`).addEventListener("keyup", (e) => {
                this._keypress(e)
            })

            document.getElementById(`track-bpm-${r._id}`).innerHTML = this._make_edit_input_field("bpm", r._id, r.track.bpm)
            document.getElementById(`main-track-list-edit-bpm-${r._id}`).addEventListener("keyup", (e) => {
                this._keypress(e)
            })

            document.getElementById(`main-track-list-edit-title-${r._id}`).focus()
        }
    }

    save_edit() {
        if (this._selected_row != undefined) {
            if (this.edit_mode) {
                this.edit_mode = false
                let r = this._selected_row[0]
                let title = document.getElementById(`main-track-list-edit-title-${r._id}`).value
                let artist = document.getElementById(`main-track-list-edit-artist-${r._id}`).value
                let album = document.getElementById(`main-track-list-edit-album-${r._id}`).value
                let genre = document.getElementById(`main-track-list-edit-genre-${r._id}`).value
                let bpm = document.getElementById(`main-track-list-edit-bpm-${r._id}`).value
                this.dispatch("row-valued-edited", {
                    title: title,
                    artist: artist,
                    album: album,
                    genre: genre,
                    bpm: bpm
                })
            }
        }
    }

    cancel_edit() {
        this.edit_mode = false
        let r = this.edit_row
        document.getElementById(`track-title-${r._id}`).innerHTML = this.edit_row.metadata.title
        document.getElementById(`track-artist-${r._id}`).innerHTML = this.edit_row.metadata.artist 
        document.getElementById(`track-album-${r._id}`).innerHTML = this.edit_row.metadata.album 
        document.getElementById(`track-genre-${r._id}`).innerHTML = this.edit_row.metadata.genre
        document.getElementById(`track-bpm-${r._id}`).innerHTML = this.edit_row.track.bpm
        this.edit_row = undefined
    }

    updateCell(id, new_value) {
        let cell = document.getElementById(id)
        if (cell) {
            cell.innerHTML = new_value
        } 
    }

    updateCellStyle(id, style, new_value) {
        let cell = document.getElementById(id)
        if (cell) {
            cell.style[style] = new_value
        } 
    }

    update_element(x) {
        let row = this.table_rows[x._id]
        x = this.convert_track(x)
        this.updateCell(`track-rating-${x.id}`, this._get_rating(x))
        this.updateCell(`track-loved-${x.id}`, this._get_loved(x))
        this.updateCell(`track-title-${x.id}`, x.title)
        this.updateCell(`track-artist-${x.id}`, x.artist)
        this.updateCell(`track-genre-${x.id}`, x.genre)
        this.updateCell(`track-bpm-${x.id}`, x.bpm)
        this.updateCell(`track-play-count-${x.id}`, x.play_count)
        this.updateCell(`track-last-played-${x.id}`, x.last_played)
        this.updateCell(`track-duration-${x.id}`, `${format_nanoseconds(x.duration)}`)
        this.updateCellStyle(`track-color-${x.id}`, 'backgroundColor', x.color)
        this.updateCellStyle(`track-row-${x.id}`, 'color', x.color)
    }

    getTrackTableElement(trackId) {
        return this.table_rows[trackId]
    }

    async filter_list (text) {
        this.list_cluster.update(await super.filter_list(text))
    };
}


module.exports = {
    TrackListView: TrackListView
}