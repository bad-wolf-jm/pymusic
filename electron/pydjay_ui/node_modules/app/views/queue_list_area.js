
const { SimpleTrackListView } = require("./simple_track_list")
const { EventDispatcher } = require("notify/event_dispatcher")
const { ContextMenu } = require("./context_menu")
// const { remote } = require('electron')
// const { Menu, MenuItem } = remote


// class ContextMenu {
//     constructor(track, library) {
//         this.track = track
//         this.library = library
//         this.menu = new Menu()
//         this.menu.append(new MenuItem({label: 'Track info', click: () => {
//             pc.stop()
//             view.set_track(this.context_menu_element)
//             document.getElementById("track-edit-dialog").showModal()


//         }}))
//         this.menu.append(new MenuItem({type: 'separator'}))
//         this.menu.append(new MenuItem({label: 'Preview',
//             submenu: [
//                 {label: 'Full track', click: () => {
//                     pc.play(this.context_menu_element)
//                 }},
//                 {label: 'Last 30 seconds', click: () => {
//                     pc.play_last_30_seconds(this.context_menu_element)
//                 }},
//                 {label: 'Last 10 seconds', click: () =>{
//                     pc.play_last_10_seconds(this.context_menu_element)
//                 }}
//             ]}))

//         this.menu.append(new MenuItem({type: 'separator'}))
//         this.menu.append(new MenuItem({label: 'Remove', click: () =>{ 
//             this.controller.remove(this.context_menu_element) 
//         }}))

//         this.menu.on("menu-will-show", (e) => {})
//         this.menu.on("menu-will-close", (e) => {})
//     }

//     popup() {
//         this.menu.popup({window: remote.getCurrentWindow()})
//     }

//     close() {
//         this.menu.closePopup()
//     }
// }


class ListPane extends EventDispatcher {
    constructor(numTracks, duration, listArea, tableBody) {
        super()
        this.numTracksDOM = numTracks
        this.durationDOM = duration
        this.listArea = new SimpleTrackListView(listArea, tableBody)
    }

    async displayModel(name, model) {
        let elements = await model.getTracks()
        let numTracks = await model.length()
        let duration = await model.duration()
        this.listArea.setList(elements)
        this.numTracksDOM.innerHTML = `${numTracks} tracks`
        this.durationDOM.innerHTML = `${format_seconds_long(duration / 1000)}`
    }
}


class QueueAreaController extends EventDispatcher {
    constructor(queue_view, playlist_editor) {
        super()

        this.element = document.getElementById("queue-list")
        this.queue_view = new ListPane(
            document.getElementById("queue-number-of-tracks"),
            document.getElementById("queue-duration"),
            document.getElementById("queue-list-area"),
            document.getElementById("queue-elements-body"),
        ) 
        this.playlist_editor = new ListPane(
            document.getElementById("playlist-edit-number-of-tracks"), 
            document.getElementById("playlist-edit-duration"), 
            document.getElementById("playlist-edit-area"), 
            document.getElementById("playlist-edit-elements-body"), 
        ) 

        this.displayed = undefined

        this.element.addEventListener("click", () => {
            focusWindow(this)
        })

        document.getElementById("edit-playlist-cancel").addEventListener("click", () => {
            this.hide_playlist_editor()
            this.playlist_editor.set_queue("",  [])
        })

    }


    show_playlist_editor() {
        document.getElementById("playlist-edit-display").style.display = "block"
        document.getElementById("queue-list-display").style.display = null
        this.displayed = this.playlist_editor
    }

    hide_playlist_editor() {
        document.getElementById("playlist-edit-display").style.display = null
        document.getElementById("queue-list-display").style.display = "block"
        this.displayed = this.queue_view
    }

    focus() {
        this.element.classList.add("focus")
    }

    blur() {
        this.element.classList.remove("focus")
    }

    delete_selection() {
        if (this.displayed != undefined) {
            this.displayed.delete_selection()
        }
    }


    selected_element() {
        if (this.displayed != undefined) {
            return this.displayed.selected_element()
        }
    }


    move_down() {
        if (this.displayed != undefined) {
            this.displayed.move_down()
        }
    }


    move_up() {
        if (this.displayed != undefined) {
            this.displayed.move_up()
        }
    }

    add_element(e) {
        if (this.displayed != undefined) {
            this.displayed.add_element(e)
        }        
    }

    move_last() {

    }


    move_first() {

    }

    page_up() {
        if (this.displayed != undefined) {
            this.displayed.page_up()
        }
    }

    page_down() {
        if (this.displayed != undefined) {
            this.displayed.page_down()
        }
    }

    add_selection_to_queue() {

    }

    add_selection_to_shortlist() {

    }

    add_selection_to_unavailable() {

    }

    remove_selection_from_unavailable() {

    }

    move_selection_up() {
        if (this.displayed != undefined) {
            this.displayed.move_selection_up()
        }
    }

    move_selection_down() {
        if (this.displayed != undefined) {
            this.displayed.move_selection_down()
        }
    }

    move_selection_to_top() {
        if (this.displayed != undefined) {
            this.displayed.move_selection_to_top()
        }
    }

    set_selected_rating(rating) {
        if (this.displayed != undefined) {
            this.displayed.set_selected_rating(rating) 
        }
    }

    toggle_selected_loved() {

    }


}


module.exports = {
    QueueAreaController: QueueAreaController
}