

const { SimpleTrackListView } = require("./simple_track_list")
const { EventDispatcher } = require("notify/event_dispatcher")
const { ContextMenu } = require("./context_menu")


class QueueContextMenu extends ContextMenu {
    constructor(track, library, model) {
        super(track, library)
        this.model = model
        this.menu.append(new MenuItem({label: 'Remove', click: () =>{ 
            this.model.remove(this.track) 
        }}))
    }

    popup() {
        this.menu.popup({window: remote.getCurrentWindow()})
    }

    close() {
        this.menu.closePopup()
    }
}


class ListPane extends EventDispatcher {
    constructor(name, numTracks, duration, listArea, tableBody, library) {
        super()
        this.nameDOM = name
        this.numTracksDOM = numTracks
        this.durationDOM = duration
        this.listArea = new SimpleTrackListView(listArea, tableBody)
        this._library = library

        this.listArea.on("list-reordered", async (newOrder) => {
            await this.model.reorder(newOrder)
            await this.updateHeader()

        })

        this.listArea.on("context-menu", async (itemId) => {
            let contextMenu = new QueueContextMenu(                
                await this._library.tracks.getElementById(itemId),
                this._library, this.model)
            contextMenu.popup()
        })

        this.listArea.on("row-double-click", async (itemId) => {
            let track = await this._library.tracks.getElementById(itemId)
            pc.play(track)
        })

        this.listArea.on("track-dropped", async (itemId) => {
            let track = await this._library.tracks.getElementById(itemId)
            if (track) {
                await this.model.append(track)
                await this.updateContents()    
            }
        })

        this.forward_content_changed = async (q) => {
            await this.updateContents()
        }
        
        this.forward_object_updated = async (q) => {
            // await this.updateContents()
        }
    }

    async updateHeader() {
        let numTracks = await this.model.length()
        let duration = await this.model.duration()
        this.numTracksDOM.innerHTML = `${numTracks} tracks`
        this.durationDOM.innerHTML = `${format_seconds_long(duration / 1000)}`
    }


    async updateContents() {
        let elements = await this.model.getTracks()
        this.listArea.setList(elements)
        await this.updateHeader()
    }

    async displayModel(name, model) {
        if (this.model != undefined) {
            this.model.un("content-changed", this.forward_content_changed) 
            this.model.un("object-updated", this.forward_object_updated)
        }
        this.nameDOM.innerHTML = `${name}`
        if (model) {
            this.model = model
            this.model.on("content-changed", this.forward_content_changed) 
            this.model.on("object-updated", this.forward_object_updated)
            this.updateContents()    
        } else {
            this.listArea.setList([])
        }
    }

    moveDown() {
        this.listArea.moveDown()
    }

    moveUp() {
        this.listArea.moveUp()
    }

    deleteSelection() {

    }

    addElement(e) {
        this.model.append(e)
    }
}


class QueueAreaController extends EventDispatcher {
    constructor(library) {
        super()
        this.library = library
        this.element = document.getElementById("queue-list")
        this.queue_view = new ListPane(
            document.getElementById("queue-name"),
            document.getElementById("queue-number-of-tracks"),
            document.getElementById("queue-duration"),
            document.getElementById("queue-list-area"),
            document.getElementById("queue-elements-body"),
            library
        ) 
        this.playlist_editor = new ListPane(
            document.getElementById("playlist-edit-name"),
            document.getElementById("playlist-edit-number-of-tracks"), 
            document.getElementById("playlist-edit-duration"), 
            document.getElementById("playlist-edit-area"), 
            document.getElementById("playlist-edit-elements-body"), 
            library
        ) 
        this.playlist_editor.listArea.disable()

        this.displayed = undefined

        this.element.addEventListener("click", () => {
            focusWindow(this)
        })

        document.getElementById("edit-playlist-cancel").addEventListener("click", () => {
            this.hide_playlist_editor()
            this.playlist_editor.displayModel("")
        })

    }


    show_playlist_editor() {
        document.getElementById("playlist-edit-display").style.display = "block"
        document.getElementById("queue-list-display").style.display = null
        this.displayed = this.playlist_editor
    }

    hide_playlist_editor() {
        document.getElementById("playlist-edit-display").style.display = null
        document.getElementById("queue-list-display").style.display = "block"
        this.displayed = this.queue_view
    }

    focus() {
        this.element.classList.add("focus")
    }

    blur() {
        this.element.classList.remove("focus")
    }

    delete_selection() {
        if (this.displayed != undefined) {
            this.displayed.deleteSelection()
        }
    }

    async selected_element() {
        if (this.displayed != undefined) {
            let selection = this.displayed.listArea.getSelection()
            if (selection.length == 1) {
                return await this._library.tracks.getElementById(selection[0])
                // await this.library.tracks.setTrackMetadata(T, {"stats.rating": rating})
            }
    
            // return this.displayed.selected_element()
        }
    }


    move_down() {
        if (this.displayed != undefined) {
            this.displayed.moveDown()
        }
    }

    move_up() {
        if (this.displayed != undefined) {
            this.displayed.moveUp()
        }
    }

    add_element(e) {
        if (this.displayed != undefined) {
            this.displayed.addElement(e)
        }        
    }

    move_last() {

    }


    move_first() {

    }

    page_up() {
        if (this.displayed != undefined) {
            this.displayed.page_up()
        }
    }

    page_down() {
        if (this.displayed != undefined) {
            this.displayed.page_down()
        }
    }

    add_selection_to_queue() {

    }

    add_selection_to_shortlist() {

    }

    add_selection_to_unavailable() {

    }

    remove_selection_from_unavailable() {

    }

    move_selection_up() {
        if (this.displayed != undefined) {
            this.displayed.listArea.moveSelectionUp()
        }
    }

    move_selection_down() {
        if (this.displayed != undefined) {
            this.displayed.listArea.moveSelectionDown()
        }
    }

    move_selection_to_top() {
        if (this.displayed != undefined) {
            this.displayed.move_selection_to_top()
        }
    }

    set_selected_rating(rating) {
        if (this.displayed != undefined) {
            this.displayed.set_selected_rating(rating) 
        }
    }

    toggle_selected_loved() {

    }


}


module.exports = {
    QueueAreaController: QueueAreaController
}