const moment = require('moment');
const { remote, ipcRenderer } = require("electron")
const electron = require("electron")
const { Image } = require("ui/dom/image.js")
const { Label } = require("ui/dom/label")
const { Button } = require("ui/dom/button.js")
const { WaveformView } = require("app/components/waveform")
const { BoxLayout } = require("ui/layout/box")
const { StackLayout } = require("ui/layout/stack")
const { DOMElement } = require("ui/dom/domelement.js")
const { Question } = require("ui/dialog/question.js")
const { AudioOutputSettings } = require("app/dialogs/audio_setup")
const { SessionSaveDialog } = require('app/dialogs/session_save_dialog')
const { AutomixSettingsDialog } = require('app/dialogs/automix_settings_dialog')
const { YoutubeSearchDialog } = require('app/dialogs/youtube_search')
const { TagEditDialog } = require('app/dialogs/tag_edit_dialog')
const { DropdownMenu } = require("ui/dom/dropdownmenu")


class SettingsMenu extends DropdownMenu {
    constructor() {
        super()
        this.addItem(`<i class="fa fa-plus"></i>&nbsp;&nbsp;Add tracks`, () => {
            remote.dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }, (files) => {
                if (files != undefined) {
                    let x = new TrackAdder(files, MDB)
                }
            })
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-refresh"></i>&nbsp;&nbsp;Audio setup`, () => {
            let d = new AudioOutputSettings({
                library: MDB,
                appController: AppController,
                masterOutputChange: (deviceId) => {
                    AppController.setMasterOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.main_master': deviceId}
                    })
                },
                masterHeadphoneChange: (deviceId) => {
                    AppController.setHeadsetOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.main_headset': deviceId}
                    })
                },
                prelistenOutputChange: (deviceId) => {
                    AppController.setPrelistenOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.prelisten': deviceId}
                    })
        
                }
            })
            d.open()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-youtube-square"></i>&nbsp;&nbsp;Youtube search`, async () => {
            AppController.stopPrelisten()
            let audio_setup = await MDB.getAudioSetup()
            let audio_outputs_devices = await (new AudioOutputDetector().detectAutioOutputs())
            let audio_outputs = {}
            audio_outputs_devices.forEach((o) => {
                audio_outputs[o.deviceId] = o.label
            })

            let d = new YoutubeSearchDialog(MDB)
            if (audio_outputs[audio_setup.prelisten]) {
                d.setOutputDeviceId(audio_setup.prelisten)
            } else {
                d.setOutputDeviceId("null")
            }        
            d.open()
            await d.init()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-tags"></i>&nbsp;&nbsp;Edit tags`, async () => {
            let d = new TagEditDialog(MDB)
            d.open()
            await d.init()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-tags"></i>&nbsp;&nbsp;Automix settings`, async () => {
            let dialog = new AutomixSettingsDialog({
                confirmAction: async () => {
                    let name = dialog.name_input.getText()
                
                    if (name != "") {
                        await MDB.setTrackGap(parseInt(name))
                    }
                    dialog.close()
                },
                dismissAction: () => {
                    dialog.close()
                }
            })
            dialog.open()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-stop"></i>&nbsp;&nbsp;Stop queue now`, () => {
            AppController.stopQueue()
        })
        this.addItem(`<i class="fa fa-ellipsis-h"></i>&nbsp;&nbsp;Skip current track`, () => {
            AppController.skipToNextTrack()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-save"></i>&nbsp;&nbsp;Save current session`, () => {
            let dialog = new SessionSaveDialog({
                confirmAction: async () => {
                    let name = dialog.name_input.getText()
                
                    if (name != "") {
                        await MDB.saveCurrentSession(name)
                    }
                    dialog.close()
                },
                dismissAction: () => {
                    dialog.close()
                }
            })
            dialog.open()
        })
        this.addItem(`<i class="fa fa-minus"></i>&nbsp;&nbsp;Discard current session`, () => {
            let q = new Question({
                title: "Discard current session",
                question: "Discard the current session? this operation cannot be undone",
                confirmText: "yes",
                dismissText: 'no',
                confirmAction: () => {
                    MDB.discardCurrentSession()
                    q.close()
                },
                dismissAction: () => {
                    q.close()
                },
            })
            q.open()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-desktop"></i>&nbsp;&nbsp;Toggle fullscreen`, () => {
            let window = electron.remote.getCurrentWindow();
            window.setFullScreen(!(window.isFullScreen()));
        })
        this.addItem(`<i class="fa fa-bug"></i>&nbsp;&nbsp;Open developper tools`, () => {
            let window = electron.remote.getCurrentWindow();
            window.openDevTools();
        })
        this.addItem(`<i class="fa fa-refresh"></i>&nbsp;&nbsp;Reload`, () => {
            let window = electron.remote.getCurrentWindow();
            window.reload();
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-power-off"></i>&nbsp;&nbsp;Quit`, () => {
            ipcRenderer.send("quit-pymusic")
        })
        
    }
}


class MainPlayerView extends BoxLayout {
    constructor (track_list_model) {
        super('vertical', {left: 0, right: 0, top: 0, bottom: 0, padding: 0})
        this.track_list_model = track_list_model
        this.controller = undefined
        
        this.queueControlOverlay = new BoxLayout("horizontal")
        this.queueControlOverlay.setStyle({
            backgroundColor: "rgb(20,20,20)",
            borderLeft: "1px solid grey",
            borderRight: "1px solid grey"
        })

        this.queueStartButton = new Button()
        this.queueStartButton.setText("START QUEUE")
        this.queueStartButton.setStyle({
            backgroundColor: "rgb(40,40,40)",
            outline: "none",
            border: "0px solid black"
        })
        this.queueStartButton.on("click", () => {
            this.controller.startQueue()
        })
        this.queueControlOverlay.append(new DOMElement('div'), true, true)
        this.queueControlOverlay.append(this.queueStartButton, true, true)
        this.queueControlOverlay.append(new DOMElement('div'), true, true)

        this.playerStack = new StackLayout()
        this.playerStack.addItem("queue-stopped", this.queueControlOverlay)

        this.settingsMenu = new SettingsMenu()
        this.settingsMenu.setStyle({
            backgroundColor: 'rgb(30,30,30)',
            fontSize: '15pt'
        })
        this.settingsMenu.domElement.innerHTML = (`<i class="fa fa-cog"></i>`)

        this.waveformView = new WaveformView(35, "rgb(145,145,145)", 'rgb(100,100,100)')
        this.waveformView.setStyle({
            backgroundColor: "rgb(10,10,10)",
            overflow: "hidden",
            borderTop: "1px solid grey"
        })
        this.waveformView.on("waveform-ready", () => {
            this.controller.startMainPlayback(this._track)
        })
        
        let topLayout = new BoxLayout('horizontal', {left: 0, right: 0, top: 0, bottom: 0, padding: 0})
        
        // this.c = document.getElementById("main-player")
        this.trackTitleLabel = new Label() 

        this.trackTitleLabel.setStyle({
            fontWeight: 'bold'
        })

        this.trackArtistLabel = new Label("FOO")
        this.trackArtistLabel.setStyle({
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: 'nowrap'
        })
        this.timeRemainingLabel = new Label("0:00")
        this.timeRemainingLabel.setStyle({
            textAlign: "right",
            fontWeight: "bold",
            fontSize: "17pt"
        })
        this.trackBPMLabel = new Label("<i class='fa fa-heartbeat' style='font-size: 10pt'></i> 123")
        this.trackBPMLabel.setStyle({
            textAlign: "right"
        })

        this.trackCoverImage = new Image()
        let playerLayout = new BoxLayout('horizontal', {padding: 5})
        playerLayout.setStyle({
            backgroundColor: "rgb(20,20,20)",
            borderLeft: "1px solid grey",
            borderRight: "1px solid grey"
        })
        playerLayout.append(this.trackCoverImage, false, true, 50)

        let infoLayout =  new BoxLayout('vertical', {padding: 2})
        let titleLayout =  new BoxLayout('vertical', {top:7, bottom:2, padding: 3})
        titleLayout.append(this.trackTitleLabel, false, true, 20)
        titleLayout.append(this.trackArtistLabel, false, true, 20)

        let titleAndTimeLayout = new BoxLayout('horizontal', {padding: 7})
        titleAndTimeLayout.append(titleLayout, true, true)

        let timeRemainingBPMLayout = new BoxLayout('vertical', {padding: 2})
        timeRemainingBPMLayout.append(this.timeRemainingLabel, false, true, 25)
        timeRemainingBPMLayout.append(this.trackBPMLabel, true, true)
        titleAndTimeLayout.append(timeRemainingBPMLayout, false, true, 55)

        infoLayout.append(titleAndTimeLayout, true, true, 55)
        infoLayout.append(new DOMElement('div'), true, true)
        playerLayout.append(infoLayout, true, true)
        playerLayout.append(new DOMElement('div'), false, true, 0)

        this.playerStack.addItem("player", playerLayout)

        topLayout.append(this.settingsMenu, false, true, 50)
        topLayout.append(new DOMElement('div'), true, true)
        topLayout.append(this.playerStack, true, true, 75)
        topLayout.append(new DOMElement('div'), true, true)
        topLayout.append(new DOMElement('div'), false, 50)

        this.append(topLayout, false, true, 50)
        this.append(this.waveformView, false, true, 35)

        // this.c.appendChild(this.domElement)

        this.track_list_model.on("object-updated", (track) => {
            if (this._track != undefined) {
                if (track._id == this._track._id) {
                    this.update_track(track)
                }    
            }
        })
    }

    set_controller(controller) {
        this.controller = controller
        this.controller.on("main:stream-position", (pos) => {
            let remaining = Math.abs(pos.duration*1000 - pos.position)
            this.timeRemainingLabel.setText(`-${moment(remaining).format("m:ss")}`)
            let p = pos.position / this._track.track.duration
            p = Math.max(p,0.0)
            p = Math.min(p,1.0)
            this.waveformView.seekAndCenter(p)
        })
        this.controller.on("main:queue-started", () => {
            this.playerStack.displayItem("player")
        })
        this.controller.on("main:queue-stopped", () => {            
            this.playerStack.displayItem("queue-stopped")
            this.waveformView.empty()
        })
        this.controller.on("main:queue-finished", () => {
            this.playerStack.displayItem("queue-stopped")            
            this.waveformView.empty()
        })

        AppController.on("main:next-track-countdown", (time) => {
            if (time > 1) {
                this.trackTitleLabel.setText(`Next track will start in ${time} seconds`)
            } else if (time == 1) {
                this.trackTitleLabel.setText(`Next track will start in 1 second`)
            } else {
                this.trackTitleLabel.setText(`Next track will start now`)
            }
        })
        
        this.controller.on("main:track-start-request", this.set_track.bind(this))
    }

    update_track(track) {
        let stream_length = (track.track.stream_end - track.track.stream_start);
        this._track = track
        this.trackTitleLabel.setText(track.metadata.title)
        let artistAlbum = `<i>${track.metadata.artist}</i> -- ${track.metadata.album}`
        this.trackArtistLabel.setText(artistAlbum)
        this.trackBPMLabel.setText(`<i class='fa fa-heartbeat' style='font-size: 10pt'></i> ${track.track.bpm}`)
        this.timeRemainingLabel.setText(`-${moment(stream_length).format("m:ss")}`)
        let cover_source = undefined
        if (track.metadata.cover == null) {
            cover_source = "../../resources/images/default_album_cover.png"
        } else {
            cover_source = `file://${track.metadata.cover.small}`;
        }
        this.trackCoverImage.setImage(cover_source)
    }

    set_track(tr) {
        this.update_track(tr)
        this.waveformView.load(tr)
    }

    updateRating(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.rating': new_value})
        }
    }

    updateLoved(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.loved': new_value})
        }
    }

    init () {

    }
}


module.exports = {
    MainPlayerView: MainPlayerView
}

