const WaveSurfer = require("wavesurfer.js")
const WaveSurferRegions = require('wavesurfer.js/dist/plugin/wavesurfer.regions.min.js');
const moment = require('moment');

const { Image } = require("ui/dom/image.js")
const { Label } = require("ui/dom/label")
// const { Rating } = require("app/components/rating")
// const { CustomCheckbox } = require("app/components/favorite")
const { BoxLayout } = require("ui/layout/box")
const { StackLayout } = require("ui/layout/stack")
const { DOMElement } = require("ui/dom/domelement.js")


class LabeledInfo extends BoxLayout {
    constructor(label) {
        super("vertical", {left:0, right:0, top:0, bottom:0, padding:0})
        this.label = new Label(label)
        this.label.setStyle({
            fontSize: "8pt",
            textAlign: "center",
            textTransform: "uppercase",
            color: "rgb(120,120,120)"
        })
        this.input = new Label()
        this.input.domElement.classList.remove('main-track-search')
        this.input.setStyle({
            marginTop: '8px',
            paddingLeft:'15px',
            textAlign: "center",
            color: 'rgb(200,200,200)',
            // backgroundColor: "rgb(190,190,190)",
            fontSize: '10pt',
            border: 'none',
            outline: "none"
        })
        this.append(this.label, true, true)
        this.append(this.input, true, true)
    }

    setText(v) {
        this.input.setText(v)
    }

    getText() {
        return this.input.getText()
    }
}


class SettingsMenu extends DropdownMenu {
    constructor() {
        super()
        this.addItem(`<i class="fa fa-plus"></i>&nbsp;&nbsp;Add tracks`, () => {
            remote.dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }, (files) => {
                if (files != undefined) {
                    let x = new TrackAdder(files, MDB)
                }
            })
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-refresh"></i>&nbsp;&nbsp;Audio setup`, () => {
            let d = new AudioOutputSettings({
                library: MDB,
                appController: AppController,
                masterOutputChange: (deviceId) => {
                    AppController.setMasterOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.main_master': deviceId}
                    })
                },
                masterHeadphoneChange: (deviceId) => {
                    AppController.setHeadsetOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.main_headset': deviceId}
                    })
                },
                prelistenOutputChange: (deviceId) => {
                    AppController.setPrelistenOutputDeviceId(deviceId)
                    MDB.state.d.update({_id: "settings"}, {
                        $set: {'audio_setup.prelisten': deviceId}
                    })
        
                }
            })
            d.open()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-tags"></i>&nbsp;&nbsp;Edit tags`, async () => {
            let d = new TagEditDialog(MDB)
            d.open()
            await d.init()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-stop"></i>&nbsp;&nbsp;Stop queue now`, () => {
            AppController.stopQueue()
        })
        this.addItem(`<i class="fa fa-ellipsis-h"></i>&nbsp;&nbsp;Skip current track`, () => {
            AppController.skipToNextTrack()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-save"></i>&nbsp;&nbsp;Save current session`, () => {
            let dialog = new SessionSaveDialog({
                confirmAction: async () => {
                    let name = dialog.name_input.domElement.value
                
                    if (name != "") {
                        await MDB.saveCurrentSession(name)
                    }
                    dialog.close()
                },
                dismissAction: () => {
                    dialog.close()
                }
            })
            dialog.open()
        })
        this.addItem(`<i class="fa fa-minus"></i>&nbsp;&nbsp;Discard current session`, () => {
            let q = new Question({
                title: "Discard current session",
                question: "Discard the current session? this operation cannot be undone",
                confirmText: "yes",
                dismissText: 'no',
                confirmAction: () => {
                    MDB.discardCurrentSession()
                    q.close()
                },
                dismissAction: () => {
                    q.close()
                },
            })
            q.open()
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-desktop"></i>&nbsp;&nbsp;Toggle fullscreen`, () => {
            let window = electron.remote.getCurrentWindow();
            window.setFullScreen(!(window.isFullScreen()));
        })
        this.addItem(`<i class="fa fa-bug"></i>&nbsp;&nbsp;Open developper tools`, () => {
            let window = electron.remote.getCurrentWindow();
            window.openDevTools();
        })
        this.addSeparator()
        this.addItem(`<i class="fa fa-power-off"></i>&nbsp;&nbsp;Quit`, () => {
            ipcRenderer.send("quit-pymusic")
        })
        
    }
}


class MainPlayerView extends BoxLayout {
    constructor (track_list_model) {
        super('horizontal', {left: 0, right: 0, top: 0, bottom: 0, padding: 0})
        this.track_list_model = track_list_model
        this.controller = undefined
        
        this.settingsMenu = new SettingsMenu()

        this.c = document.getElementById("main-player")
        // console.log("123")
        // this.precueMenuOptions = new DropdownMenu()
        this.trackTitleLabel = new Label() 

        this.trackTitleLabel.setStyle({
            fontWeight: 'bold'
        })
        this.trackAlbumLabel = new Label() 
        this.trackAlbumLabel.setStyle({
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: 'nowrap'

        })
        this.trackArtistLabel = new Label()
        this.trackArtistLabel.setStyle({
            // fontStyle: 'italic',
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: 'nowrap'
        })
        this.timeRemainingLabel = new Label("0:00")
        this.timeRemainingLabel.setStyle({
            textAlign: "right",
            fontWeight: "bold",
            fontSize: "17pt"
        })
        // this.trackLastPlayedLabel = new LabeledInfo('last played')
        this.trackBPMLabel = new Label("<i class='fa fa-heartbeat' style='font-size: 10pt'></i> 123")
        this.trackBPMLabel.setStyle({
            textAlign: "right"
        })
        // this.trackDurationLabel = new LabeledInfo('length')
        this.trackCoverImage = new Image()
        // this.trackRating = new Rating("rgb(200,200,200)")
        // this.trackLoved = new CustomCheckbox("rgb(200,200,200)")

        let playerLayout = new BoxLayout('horizontal', {padding: 5})
        playerLayout.setStyle({
            backgroundColor: "rgb(20,20,20)"
        })
        playerLayout.append(this.trackCoverImage, false, true, 50)

        let infoLayout =  new BoxLayout('vertical', {padding: 2})
        let titleLayout =  new BoxLayout('vertical', {top:7, bottom:2, padding: 3})
        titleLayout.append(this.trackTitleLabel, false, true, 20)

        let artistLayout =  new BoxLayout('horizontal', {padding: 7})
        artistLayout.append(this.trackArtistLabel, true, true, 15)
        titleLayout.append(artistLayout, false, true, 20)

        let titleAndTimeLayout = new BoxLayout('horizontal', {padding: 7})
        titleAndTimeLayout.append(titleLayout, true, true)

        let timeRemainingBPMLayout = new BoxLayout('vertical', {padding: 2})
        timeRemainingBPMLayout.append(this.timeRemainingLabel, false, true, 25)
        timeRemainingBPMLayout.append(this.trackBPMLabel, true, true)
        titleAndTimeLayout.append(timeRemainingBPMLayout, false, true, 55)

        // let metadataLayout = new BoxLayout('horizontal', {padding: 7})
        // metadataLayout.append(this.trackDurationLabel, false, true, 75)
        // metadataLayout.append(this.trackBPMLabel, false, true, 75)
        // metadataLayout.append(this.trackLastPlayedLabel, true, true)
        // metadataLayout.append(this.trackRating, false, true, 75)
        // metadataLayout.append(this.trackLoved, false, true, 15)
        infoLayout.append(titleAndTimeLayout, true, true, 55)
        infoLayout.append(new DOMElement('div'), true, true)
        // infoLayout.appsend(metadataLayout, false, true, 35)
        playerLayout.append(infoLayout, true, true)

        this.append(this.settingsMenu, false, true, 50)
        this.append(new DOMElement('div'), true, true)
        this.append(playerLayout, true, true, 75)
        this.append(new DOMElement('div'), true, true)
        this.append(new DOMElement('div'), false, 50)

        this.c.appendChild(this.domElement)

        // this.trackRating.on('changed', (value) => {
        //     this.updateRating(value)
        // })

        // this.trackLoved.on("changed", (value) => {
        //     this.updateLoved(value)
        // })

        this.track_list_model.on("object-updated", (track) => {
            if (this._track != undefined) {
                if (track._id == this._track._id) {
                    this.update_track(track)
                }    
            }
        })
    }

    set_controller(controller) {
        this.controller = controller
        this.controller.on("main:stream-position", (pos) => {
            let remaining = Math.abs(pos.duration*1000 - pos.position)
            document.getElementById("main-player-time-remaining").innerHTML = `-${moment(remaining).format("m:ss")}`
        })
        this.controller.on("main:queue-started", () => {

        })
        this.controller.on("main:queue-stopped", () => {
            
        })
        this.controller.on("main:queue-finished", () => {
            
        })
        // // this.controller.on("main:track-finished", this.set_queue.bind(this))
        this.controller.on("main:track-start-request", this.set_track.bind(this))
        // this.controller.on("main:queue-finished", this.set_queue.bind(this))
        // this.controller.on("main:next-track-countdown", this.set_queue.bind(this))
    }

    update_track(track) {
        let stream_length = (track.track.stream_end - track.track.stream_start);
        this._track = track
        this.trackTitleLabel.setText(track.metadata.title)

        let artistAlbum = `<i>${track.metadata.artist}</i> | ${track.metadata.album}`

        // this.trackAlbumLabel.setText(track.metadata.album)
        this.trackArtistLabel.setText(artistAlbum)
        // this.trackGenreLabel.setText(track.metadata.genre)
        // if (track.stats.last_played) {
        //     this.trackLastPlayedLabel.setText(moment(track.stats.last_played).format("Y-MM-DD h:mm:ss"))
        // } else {
        //     this.trackLastPlayedLabel.setText('NULL')
        // }
        this.trackBPMLabel.setText(`<i class='fa fa-heartbeat' style='font-size: 10pt'></i> ${track.track.bpm}`)
        // this.trackDurationLabel.setText(`${moment(stream_length).format("m:ss")}`)
        this.timeRemainingLabel.setText(`-${moment(stream_length).format("m:ss")}`)
        // this.trackRating.setRating(track.stats.rating)
        // this.trackLoved.setValue(track.stats.loved)
        let cover_source = undefined
        if (track.metadata.cover == null) {
            cover_source = "../../resources/images/default_album_cover.png"
        } else {
            cover_source = `file://${track.metadata.cover.small}`;
        }
        this.trackCoverImage.setImage(cover_source)
    }

    set_track(tr) {
        this.update_track(tr)
    }

    updateRating(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.rating': new_value})
        }
    }

    updateLoved(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.loved': new_value})
        }
    }

    init () {

    }
}


module.exports = {
    MainPlayerView: MainPlayerView
}

