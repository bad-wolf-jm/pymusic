const { DropdownMenu } = require("app/components/dropdownmenu")
const { PropertySheet } = require("app/components/propertysheet")
const { Button } = require("ui/dom/button")
const { Image } = require("ui/dom/image.js")
const { Label } = require("ui/dom/label")
const { ProgressBar } = require("ui/dom/progress")
const { Rating } = require("app/components/rating")
const { CustomCheckbox } = require("app/components/favorite")
const { BoxLayout } = require("ui/layout/box")

const moment = require('moment');


class PrecuePlayerView extends BoxLayout {
    constructor (track_list_model) {
        super('vertical', {left: 10, right: 10, top: 10, bottom: 5, padding: 10})
        this.track_list_model = track_list_model
        this.controller = undefined

        this.c = document.getElementById("preview-player-surface")
        //this.plMenu = document.getElementById("dd-menu")
        //this.noPreview = document.getElementById("no-preview-track")

        this.precueMenuOptions = new DropdownMenu()
        this.trackTitleLabel = new Label() 
        this.trackAlbumLabel = new Label() 
        this.trackArtistLabel = new Label()
        this.trackYearLabel = new Label()
        this.trackGenreLabel = new Label()
        this.trackLastPlayedLabel = new Label()
        this.trackPlayCountLabel = new Label()
        this.trackBPMLabel = new Label()
        this.trackDurationLabel = new Label()
        this.trackCoverImage = new Image()
        this.trackPlayButton = new Button()
        this.trackProgress = new ProgressBar()
        this.trackRating = new Rating()
        this.trackLoved = new CustomCheckbox()

        let controlLayout = new BoxLayout('horizontal', {padding: 5})
        controlLayout.append(this.trackCoverImage, false, true, 75)
        let seekLayout = new BoxLayout("horizontal")
        seekLayout.append(this.trackPlayButton, false, true, 25)
        seekLayout.append(this.trackProgress , true, true)
        seekLayout.append(this.precueMenuOptions, false, true, 25)
        controlLayout.append(seekLayout, true, true)

        let titleLayout =  new BoxLayout('vertical', {padding: 5})
        titleLayout.append(this.trackTitleLabel, false, true, 15)
        titleLayout.append(this.trackArtistLabel, false, true, 15)
        let ratingLayout = new BoxLayout('horizontal', {padding: 5})
        ratingLayout.append(this.trackRating, true, true)
        ratingLayout.append(this.trackLoved, true, true)
        titleLayout.append(ratingLayout, false, true, 15)

        let infoLayout = new PropertySheet()
        infoLayout.addItem("<b>Album:</b>", this.trackAlbumLabel)
        infoLayout.addItem("<b>Genre:</b>", this.trackGenreLabel)
        infoLayout.addItem("<b>Year:</b>", this.trackYearLabel)
        infoLayout.addItem("<b>Length:</b>", this.trackDurationLabel)
        infoLayout.addItem("<b>BPM:</b>", this.trackBPMLabel)
        infoLayout.addItem("<b>Last played:</b>", this.trackLastPlayedLabel)
        infoLayout.addItem("<b>Play count:</b>", this.trackPlayCountLabel)

        this.append(controlLayout, false, true, 75)
        this.append(titleLayout, false, true, 55)
        this.append(infoLayout, true, true)

        this.c.appendChild(this.domElement)

        this.precueMenuOptions.addItem("Play full track", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenTrack(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Play last 30 seconds", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenLast30Seconds(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Play last 10 seconds", () => {
            this.controller.getPrelistenTrack() && 
                this.controller.prelistenLast10Seconds(this.controller.getPrelistenTrack())
        })

        this.precueMenuOptions.addItem("Stop", () => {
            this.controller.stopPrelisten()
        })

        // this.plMenu.appendChild(this.precueMenuOptions.domElement)
        
        this.trackProgress.domElement.addEventListener("click", (e) => {
            let x = e.target.getBoundingClientRect()
            let mouseX = (e.clientX - x.left)
            let ratio = mouseX / x.width
            let t = this.controller.getPrelistenTrack()
            if (t != undefined) {
                this.controller.prelistenTrack(t, t.track.stream_start + ((t.track.stream_end - t.track.stream_start) * ratio))
            }
        })

        this.track_list_model.on("object-updated", (track) => {
            if (this._track != undefined) {
                if (track._id == this._track._id) {
                    this.update_track(track)
                }    
            }
        })
    }

    set_controller(controller) {
        this.controller = controller
        this.controller.on("prelisten:stream-position", (pos) => {
            let percent = (pos.position*100 / (pos.duration*1000))
            if (isFinite(percent)) {
                this.trackProgress.value = percent;
            }
        })
        this.controller.on("prelisten:track-finished", this.set_unset.bind(this))
        this.controller.on("prelisten:track-started", this.set_track.bind(this))
        this.controller.on("prelisten:playback-paused", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
        })
        this.controller.on("prelisten:playback-stopped", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
        })
        this.controller.on("prelisten:playback-started", () => {
            this.trackPlayButton.innerHTML = `<i class="fa fa-pause"></i>`
        })
        // this.trackPlayButton.domElement.addEventListener('click', () => {
        //     if ((this.controller.getPrelistenState() == "PAUSED") || (this.controller.getPrelistenState() == "PLAYING")) {
        //         this.controller.togglePrelistenPause()
        //     } else {
        //         if (this.controller.getPrelistenTrack() != undefined) {
        //             this.controller.prelistenTrack(this.controller.getPrelistenTrack())
        //         }
        //     }
        // })
        // this.trackLoved.addEventListener("click", () => {
        //     if (this._track != undefined) {
        //         this.updateLoved(!this._track.stats.loved)
        //     }
        // })
    }

    set_unset() {
        this.trackPlayButton.innerHTML = `<i class="fa fa-play"></i>`
    }

    update_track(track) {
        let stream_length = (track.track.stream_end - track.track.stream_start);
        this._track = track
        this.trackTitleLabel.setText(track.metadata.title)
        this.trackAlbumLabel.setText(track.metadata.album)
        this.trackArtistLabel.setText(track.metadata.artist)
        this.trackGenreLabel.setText(track.metadata.genre)
        this.trackYearLabel.setText(track.metadata.year)
        this.trackLastPlayedLabel.setText(track.stats.last_played)
        this.trackPlayCountLabel.setText(track.stats.play_count)
        this.trackBPMLabel.setText(track.track.bpm)
        this.trackDurationLabel.setText(`${moment(stream_length).format("m:ss")}`)
        this.trackRating.setRating(track.stats.rating)
        this.trackLoved.setValue(track.stats.loved)
        let cover_source = undefined
        if (track.metadata.cover == null) {
            cover_source = "../../resources/images/default_album_cover.png"
        } else {
            cover_source = `file://${track.metadata.cover.small}`;
        }
        this.trackCoverImage.setImage(cover_source)
        // this.noPreview.style.display = "none"
    }

    set_track(tr) {
        this.update_track(tr.track_object)
    }

    updateRating(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.rating': new_value})
        }
    }

    updateLoved(new_value) {
        if (this.track_list_model != undefined) {
            this.track_list_model.setTrackMetadata(this._track, {'stats.loved': new_value})
        }
    }
}


module.exports = {
    PrecuePlayerView: PrecuePlayerView
}