const { ClusteredListView } = require('ui/listview/cluster')
const { ToggleRenderer, RatingRenderer, TextRenderer, NumberRenderer, DateRenderer} = require('ui/listview/renderer')
const $ = require("jquery")


class DetailedTrackListView extends ClusteredListView {
    constructor(dom_ids, queue_controller, shortlist_controller, unavailable_controller) {
        super(document.getElementById("main-track-list-body"), document.getElementById("main-track-list-scroller"))
        this.prevWidth = [];
        this.setupColumnRenderers()
        document.getElementById("track-list-header").innerHTML = this.renderHeader()
        this._objectid_to_row_id = {}
    }

    focus() {

    }

    blur() {

    }

    move_down() {
        this.moveDown()
    }

    move_up() {
        this.moveUp()
    }

    compare_tracks(a, b) {
        if (!a.metadata.title) { return -1 }
        if (!b.metadata.title) { return 1 }
        let x = a.metadata.title.toLowerCase();
        let y = b.metadata.title.toLowerCase();
        if (x < y) { return -1; }
        if (x > y) { return 1; }
        return 0;        
    }    

    convert_track(track_element) {
        let { metadata, stats, track } = track_element
        return {
            id: track_element._id,
            color: metadata.color,
            title: metadata.title,
            artist: metadata.artist,
            album: metadata.album,
            genre: metadata.genre,
            last_played: stats.last_played, 
            play_count: stats.play_count,
            duration: track.stream_end - track.stream_start,
            bpm: track.bpm,
            loved: stats.loved,
            rating: stats.rating
        }
    }

    clusterChanged(rows) {
        this.fitHeaderColumns()
    }

    setupColumnRenderers() {
        this.addColumnRenderer({
            _config: {}, 
            render: (row, col, track) => {
                return `<td style="width:25px; text-align:center">
                    <input id='track-color-value-${track.id}' type="hidden" value="" class="main-list-color-value" data-track-id=${track.id}/>
                    <button id='${this._viewId}-color-${track.id}' class="main-list color-chooser show-color-picker" style="background-color:${track.color}" data-track-id=${track.id}></button>
                </td>`
        }})

        this.addColumnRenderer(new ToggleRenderer({
            width: "25px",
            headerTitle: "<b><i class='fa fa-heart' style='font-size: 12px'/></b>",
            textAlign: "center",
            checked: "fa-heart",
            unchecked: "fa-heart-o",
            id: (rowId, columnId) => {
                return `${this._viewId}-loved-${rowId}`
            },
            color: (obj) => {return obj.color},
            value: (obj) => {return obj.loved}
        }))

        this.addColumnRenderer(new TextRenderer({
            maxWidth: "110px",
            editTag: "title",
            headerTitle: "Title",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.title}
        }))
            
        this.addColumnRenderer(new TextRenderer({
            maxWidth: "110px",
            editTag: "artist",
            headerTitle: "Artist",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.artist}
        }))

        this.addColumnRenderer(new TextRenderer({
            maxWidth: "110px",
            editTag: "album",
            headerTitle: "Album",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.album}
        }))

        this.addColumnRenderer(new TextRenderer({
            maxWidth: "40px",
            editTag: 'genre',
            headerTitle: "Genre",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.genre}
        }))

        this.addColumnRenderer(new NumberRenderer({
            width: "30px",
            textAlign: 'right',
            headerTitle: "<b><span class='fa fa-play'/></b>",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.play_count}
        }))

        this.addColumnRenderer(new DateRenderer({
            width: "75px",
            textAlign: "right",
            headerTitle: "<b><span class='fa fa-calendar' style='font-size: 15px'/></b>",
            dateFormat: "MM-DD-YYYY",
            color: (obj) => {return obj.color},
            date: (obj) => {return obj.last_played}
        }))
            
        this.addColumnRenderer(new RatingRenderer({
            width: "75px",
            textAlign: "center",
            headerTitle: "Rating",
            dateFormat: "MM-DD-YYYY",
            id: (rowId, columnId) => {
                return `${this._viewId}-rating-${rowId}`
            },
            color: (obj) => {return obj.color},
            value: (obj) => {return obj.rating}
        }))

        this.addColumnRenderer(new NumberRenderer({
            width: "25px",
            textAlign: 'right',
            editTag: "bpm",
            headerTitle: "<b style='font-size: 13px'><span class='fa fa-heartbeat' style='font-size: 15px'/></b>",
            color: (obj) => {return obj.color},
            text: (obj) => {return obj.bpm}
        }))

        this.addColumnRenderer(new DateRenderer({
            width: "40px",
            textAlign: "right",
            dateFormat: "m:ss",
            headerTitle: "Time",
            color: (obj) => {return obj.color},
            date: (obj) => {return obj.duration}
        }))
    }

    fitHeaderColumns() {
        let $headers = $("#track-list-elements-header")
        let $firstRow = $("#main-track-list-table").find('tr:not(.clusterize-extra-row):first');
        let columnsWidth = [];
        $firstRow.children().each(function () {
            columnsWidth.push($(this).width());
        });
        if (this.preWidth == undefined) {
            this.prevWidth = []
        }
        if (columnsWidth.toString() == this.prevWidth.toString()) return;
        $headers.find('tr').children().each(function(i) {
            $(this).width(columnsWidth[i]);
        });
        this.prevWidth = columnsWidth;
    }

    async set_list(name, list_elements) {
        if (list_elements == undefined) {
            list_elements = []
        }

        if (!this.model_order) {
            list_elements.sort(this.compare_tracks)
        }

        let rowIds = this.setRows(list_elements.map((e) => {
            return this.convert_track(e)
        }))

        this._objectid_to_row_id = {}

        Object.keys(rowIds).forEach((id) => {
            this._objectid_to_row_id[rowIds[id].id] = id
        })
    }

    setDimmedRows(idList) {
        let rowIdList = idList.map((x) => {
            return this._objectid_to_row_id[x]
        }).filter((x) => {
            return x
        })
        super.setDimmedRows(rowIdList)
    }

    set_controller(controller) {
        this.controller = controller
        this.controller.addView(this)
        this.controller.on("content-changed", this.set_list.bind(this))
    }

    handleContextMenu(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("context-menu", trackObject.id)
    }

    handleDragStart(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        e.dataTransfer.setData("text/plain", trackObject.id)
    }

    handleDoubleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        this.dispatch("row-double-click", trackObject.id)
        this.beginEdit()
    }

    dispatch(signal, ...x) {
        console.log(signal, x)
        super.dispatch(signal, ...x)
    }

    handleClick(e) {
        let tableRow = e.target.closest("tr")
        let trackObject = this._elements.getElementById(tableRow.id)
        let eventElementId = e.target.id

        let rating_regex = new RegExp(`${this._viewId}-rating-([_a-zA-Z0-9]+)-(\\d+)`)
        let matches = rating_regex.exec(eventElementId)
        if (matches != undefined) {
            let rating_value = parseInt(matches[2])
            this.dispatch("row-rating-clicked", trackObject.id, rating_value)
            e.preventDefault()
            return;
        }

        let loved_regex = new RegExp(`${this._viewId}-loved-([_a-zA-Z0-9]+)`)
        matches = loved_regex.exec(eventElementId)
        if (matches != undefined) {
            this.dispatch("row-loved-clicked", trackObject.id)
            e.preventDefault()
            return;
        }

        let color_regex = new RegExp(`${this._viewId}-color-([a-zA-Z0-9]+)`)
        matches = color_regex.exec(eventElementId)
        if (matches != undefined) {
            let track_id = matches[1]
            this.dispatch("row-color-clicked", e, trackObject.id)
            e.preventDefault()
            return;
        }

        this.dispatch("row-click", trackObject.id)
        this.selectRow(tableRow.id)
 
    }

    delete_selection() {

    }

    updateElement(trackObject) {
        element = this.convert_track(trackObject)
        rowId = this._objectid_to_row_id[element.id]
        super.updateElement(rowId, element)
        row = this._row_elements[rowId]
        if (row) {
            row.innerHTML = this.renderRow(element)
        }
    }

    async filter_list (text) {
        this.list_cluster.update(await super.filter_list(text))
    };
}


module.exports = {
    DetailedTrackListView: DetailedTrackListView
}