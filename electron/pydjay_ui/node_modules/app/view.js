const { ApplicationWindow } = require("ui/dom/window")
const { BoxLayout } = require("ui/layout/box")
const { LayoutPlaceholder } = require("ui/layout/placeholder")


const { AudioOutputDetector } = require('webaudio/detect')
const { TrackListAreaController } = require('app/views/track_list_area')
const { QueueAreaController } = require('app/views/queue_list_area')
const { PymusicAppController } = require('app/controller')
const { Sidebar } = require("app/views/sidebar")
const { MainPlayerView } = require("app/views/header_main_player")


class DJApplicationWindow extends ApplicationWindow {
    constructor() {
        super()
        let mainLayout = new BoxLayout("vertical")
        let headerSpace = new MainPlayerView(MDB.tracks)
        headerSpace.set_controller(AppController)
        headerSpace.init()



        this.mainListSpace = new BoxLayout('vertical')


        this.mainListView = new TrackListAreaController(this.mainListSpace.domElement, MDB)
        this.mainListView._listview.on("row-click", () => {
            this.focusWindow(this.mainListView)
        })



        this.sidebarSpace = new Sidebar(this.mainListView, MDB)
        this.mainListSpace.append(this.mainListView, true, true)



        this.queueListSpace = new BoxLayout('vertical')
        let queueListView = new QueueAreaController(this.queueListSpace.domElement, MDB)
        queueListView.domElement.addEventListener("click", () => {
            this.focusWindow(queueListView)
        })
        queueListView.hide_playlist_editor()
        queueListView.queue_view.displayModel("QUEUE", MDB.queue)

        this.queueListSpace.append(queueListView, true, true)

        let mainSpaceLayout = new BoxLayout("horizontal")
        mainSpaceLayout.append(this.sidebarSpace, false, true, 350)
        mainSpaceLayout.append(this.mainListSpace, true, true)
        mainSpaceLayout.append(this.queueListSpace, false, true, 400)

        let footerSpace = new LayoutPlaceholder("footer", "rgb(142,34,45)")

        mainLayout.append(headerSpace, false, true, 85)
        mainLayout.append(mainSpaceLayout, true, true)
        mainLayout.append(footerSpace, false, true, 35)
               

        this.focusList = undefined
        this.lists = [this.mainListView, queueListView]

        this.setLayout(mainLayout)
        this.setupKeyboardBindings()
        this.initialize()

    }

    focusWindow(w) {
        if (this.focusList != undefined) {
            this.focusList.blur()
        }
        this.focusList = w
        if (this.focusList != undefined) {
            this.focusList.focus()
        }
    }
    

    setupKeyboardBindings() {
        Mousetrap.bind(["shift+delete", "shift+backspace"], (e) => {
            if (this.focusList != undefined) {
                this.focusList.delete_selection()
                e.preventDefault()
            }
        })
        
        Mousetrap.bind('up', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_up()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('down', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_down()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('shift+up', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_selection_up()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('shift+down', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_selection_down()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('ctrl+shift+up', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_selection_to_top()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('Q', (e) => {
            if (this.focusList != undefined) {
                this.focusList.add_selection_to_queue()
                e.preventDefault()
            }
        });
                
        Mousetrap.bind('S', (e) => {
            if (this.focusList != undefined) {
                this.focusList.add_selection_to_shortlist()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind(': e', (e) => {
            if (this.focusList != undefined) {
                this.focusList.begin_edit()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind(': w', (e) => {
            if (this.focusList != undefined) {
                this.focusList.save_edit()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind(': + u', (e) => {
            if (this.focusList != undefined) {
                this.focusList.add_selection_to_unavailable()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind(': - u', (e) => {
            if (this.focusList != undefined) {
                this.focusList.remove_selection_from_unavailable()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('ctrl+f', (e) => {
            document.getElementById("filter-track-list").focus()
            e.preventDefault()
        });
        
        Mousetrap.bind('shift+tab', (e) => {
            index = this.this.lists.indexOf(this.focusList)
            if (index != -1) {
                if (index - 1 < 0) {
                    focusWindow(undefined)
                    e.preventDefault()
                } else {
                    focusWindow(this.lists[index - 1])
                    e.preventDefault()
                }
            } else {
                focusWindow(this.lists[this.lists.length - 1])
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('tab', (e) => {
            index = this.lists.indexOf(this.focusList)
            if (index != -1) {
                if (index + 1 >= this.lists.length) {
                    focusWindow(undefined)
                    e.preventDefault()
                } else {
                    focusWindow(this.lists[index + 1])
                    e.preventDefault()
                }
            } else {
                focusWindow(this.lists[0])
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('shift+home', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_first()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('pagedown', (e) => {
            if (this.focusList != undefined) {
                this.focusList.page_down()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('pageup', (e) => {
            if (this.focusList != undefined) {
                this.focusList.page_up()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind('shift+end', (e) => {
            if (this.focusList != undefined) {
                this.focusList.move_last()
                e.preventDefault()
            }
        });
        
        Mousetrap.bind("space", (e) => {
            if ((AppController.getPrelistenState() == "PAUSED") || (AppController.getPrelistenState() == "PLAYING")) {
                AppController.togglePrelistenPause()
            } else {
                if (AppController.getPrelistenTrack() != undefined) {
                    AppController.prelistenTrack(AppController.getPrelistenTrack())
                }
            }
            e.preventDefault()
        })
        
        Mousetrap.bind("shift+space", (e) => {
            AppController.stopPrelisten()
            e.preventDefault()
        })
        
        Mousetrap.bind("enter", async (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenTrack(await this.focusList.selected_element())
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("shift+enter", async (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenLast30Seconds(await this.focusList.selected_element())
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("ctrl+shift+enter", async (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenLast10Seconds(await this.focusList.selected_element())
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("shift+left", (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenSkip(-1)
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("shift+right", (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenSkip(1)
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("ctrl+shift+left", (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenSkip(-5)
                e.preventDefault()
            }
        })
        
        Mousetrap.bind("ctrl+shift+right", (e) => {
            if (this.focusList != undefined) {
                AppController.prelistenSkip(5)
                e.preventDefault()
            }
        })
        
        
        Mousetrap.bind(": alt+t", (e) => {
            let window = electron.remote.getCurrentWindow();
            window.openDevTools();
            e.preventDefault()
        })
        
        Mousetrap.bind(": alt+f", (e) => {
            let window = electron.remote.getCurrentWindow();
            window.setFullScreen(!(window.isFullScreen()));
            e.preventDefault()
        })
        
        Mousetrap.bind(": alt+r", (e) => {
            let window = electron.remote.getCurrentWindow();
            window.reload();
            e.preventDefault()
        })
        
        
        Mousetrap.bind(": alt+q", (e) => {
            let window = electron.remote.getCurrentWindow();
            e.preventDefault()
        })
        
        Mousetrap.bind(": l", (e) => {
            if (this.focusList != undefined) {
                this.focusList.toggle_selected_loved()
            }
        })
        
        Mousetrap.bind(": r 0", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(0)
            }
        })
        
        Mousetrap.bind(": r 1", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(1)
            }
        })
        
        Mousetrap.bind(": r 2", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(2)
            }
        })
        
        Mousetrap.bind(": r 3", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(3)
            }
        })
        
        Mousetrap.bind(": r 4", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(4)
            }
        })
        
        Mousetrap.bind(": r 5", (e) => {
            if (this.focusList != undefined) {
                this.focusList.set_selected_rating(5)
            }
        })
    }

    async getAudioOutputDevices() {
        let output_dict = {}
        let audio_outputs = await (new AudioOutputDetector().detectAutioOutputs())
        audio_outputs.forEach((o) => {
            output_dict[o.deviceId] = o.label
        })
        return output_dict
    }
    

    setupAudioOutputs(audio_setup, available_devices) {
        if (available_devices[audio_setup.main_master]) {
            AppController.setMasterOutputDeviceId(audio_setup.main_master)
        } else {
            AppController.setMasterOutputDeviceId("null")
        }
    
        if (available_devices[audio_setup.main_headset]) {
            AppController.setHeadsetOutputDeviceId(audio_setup.main_headset)
        } else {
            AppController.setHeadsetOutputDeviceId("null")
        }
    
        if (available_devices[audio_setup.prelisten]) {
            AppController.setPrelistenOutputDeviceId(audio_setup.prelisten)
        } else {
            AppController.setPrelistenOutputDeviceId("null")
        }
    }


    initialize() {
        MDB.getAudioDevices().then(async (devices) => {
            let audio_outputs = await this.getAudioOutputDevices()
            let audio_setup = await MDB.getAudioSetup()
            this.setupAudioOutputs(audio_setup, audio_outputs)
        })
        
        var T = setInterval(async () => {
            let audio_outputs = await this.getAudioOutputDevices()
            let saved_audio_devices = await MDB.getAudioDevices()
            let audio_setup = await MDB.getAudioSetup()
            let update = false
            Object.keys(audio_outputs).forEach((deviceId) => {
                if (!(saved_audio_devices[deviceId])) {
                    saved_audio_devices[deviceId] = audio_outputs[deviceId]
                    update = true
                }
            })
            update && (await MDB.state.d.update({_id: "settings"}, {$set: {
                "audio_devices": saved_audio_devices
            }}))
            this.setupAudioOutputs(audio_setup, audio_outputs)
        
        }, 1000)
        
        window.addEventListener("load", (event) => {
            this.mainListView._listview.fitHeaderColumns()
            this.sidebarSpace.adjustHeights()
        })
        
        window.addEventListener("resize", (event) => {
            this.mainListView._listview.fitHeaderColumns()
            this.sidebarSpace.adjustHeights()
        })
        
        
        function checkTime(i) {
            return (i < 10) ? "0" + i : i;
        }
        
        function startTime() {
            let today = new Date()
            h = checkTime(today.getHours())
            m = checkTime(today.getMinutes())
            s = checkTime(today.getSeconds())
            d = checkTime(today.getDate())
            M = checkTime(today.getMonth()+1)
            Y = today.getFullYear()
            document.getElementById("footer-date").innerHTML = `${Y}-${M}-${d}`
            document.getElementById("footer-time").innerHTML = `${h}:${m}`
            t = setTimeout(function () {
                startTime()
            }, 30000);
        }
        this.mainListView.display_all_songs()
    }


}

module.exports = {
    DJApplicationWindow: DJApplicationWindow
}