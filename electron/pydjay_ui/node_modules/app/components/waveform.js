const { DOMElement } = require("ui/dom/domelement.js")
const WaveSurfer = require("wavesurfer.js")
const WaveSurferRegions = require('wavesurfer.js/dist/plugin/wavesurfer.regions.min.js');

class WaveformView extends DOMElement {
    constructor(height, progressColor, waveColor, range) {
        super("div")
        this.setStyle({
            border: "1px solid black"
        })
        this.range = range
        this.height = height || 50
        this.progressColor = progressColor || "rgb(100,100,100)"
        this.waveColor = waveColor || "rgb(200,200,200)"
    }

    load(track) {
        this._waveform = WaveSurfer.create({
            container: `#${this.domElement.id}`,
            waveColor: this.waveColor,
            progressColor: this.progressColor,
            height: this.height,
            barHeight: 1.25,
            plugins: [
                WaveSurferRegions.create({
                    container: `#${this.domElement.id}`,
                    deferInit: false,
                })
            ]
        });
        this._waveform.on(
            "ready", () => {
                this._waveform.zoom(0)
                this.dispatch("waveform-ready")
                if (this._region != undefined) {
                    this._waveform.clearRegions()
                }
                if (this.range) {
                        this._region = this._waveform.addRegion({
                        start: this.track.track.stream_start / 1000,
                        end:   this.track.track.stream_end / 1000,
                        color: "rgba(25,25,25,0.35)"
                    })
                    this._region.on("update",
                        () => {
                            this.stream_start = Math.round(this._region.start * 1000)
                            this.stream_end = Math.round(this._region.end * 1000)
                            this.stream_length = this.stream_end - this.stream_start
                            this.dispatch("bounds-changed", this.stream_start, this.stream_end)
                        }
                    )
                }
            }
        )
        this._waveform.on(
            "seek", (p) => {
                this.dispatch("seek", p)
            }
        )
        this.track = track
        let file_name = track.track.path
        this._waveform.load(file_name)
    }

    zoom(v) {
        if (this._waveform) {
            this._waveform.zoom(v)
        }
    }

    seekAndCenter(position) {
        this._waveform && this._waveform.seekAndCenter(position)
    }

}

module.exports = {
    WaveformView: WaveformView
}