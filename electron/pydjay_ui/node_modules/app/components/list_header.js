const { Button } = require("ui/dom/button.js")
const { Label } = require("ui/dom/label")
const { TextInput } = require("ui/dom/text_input.js")
const { TagFilterPicker } = require("ui/popup/tag_filter_picker")
const { BoxLayout } = require("ui/layout/box")
const { format_seconds_long } = require("app/utils")

class ListInfoHeader extends BoxLayout {
    constructor(library, filtering) {
        super("horizontal", {left: 5, right:5, top:5, bottom:5, padding:10})
        this.library = library
        this.filtering = filtering
        this.filterUnplayed = false
        this.filterTags = []

        this.domElement.classList.add("main-list-header")

        this.listNameLabel = new Label()
        this.listNameLabel.setStyle({
            textTransform: "uppercase",
            fontWeight: "bold"
        })
        this.listStatLabel = new Label()

        let nameLayout = new BoxLayout("vertical", {padding:5})
        nameLayout.append(this.listNameLabel, true, true)
        nameLayout.append(this.listStatLabel, true, true)

        this.append(nameLayout, true, true)

        if (this.filtering) {
            this.tagFilterPicker = undefined
            this.tagFilterButton = new Button()
            // this.tagFilterButton.domElement.classList.add('search-submit-button')
            this.tagFilterButton.setText(`<i class="fa fa-filter"></i>`)
            // this.tagFilterButton.setStyle({
            //     background: 'rgb(30, 30, 30)',
            //     border: 'none',
            //     outline: 'none'
            // })
            this.filterInput = new TextInput()
            this.filterInput.domElement.classList.add("main-track-search")
            this.filterInput.domElement.placeholder = "Filter tracks..."
            let filterLayout = new BoxLayout("horizontal", {padding:0})
            filterLayout.append(this.tagFilterButton, false, true, 25)
            filterLayout.append(this.filterInput, true, true)
            this.filterResultCount = new Label('')
            this.filterResultCount.setStyle({
                fontSize: "9pt",
                textAlign: "right",
                // color: 'rgb(200,200,200)'
            })
            let filterResultLayout = new BoxLayout("vertical", {padding:5})
            filterResultLayout.append(filterLayout, false, true, 20)
            filterResultLayout.append(this.filterResultCount, true, true)
            this.append(filterResultLayout, false, true, 300)
            this.initTextFilter()
            this.initTagFilter()
        }
    }

    initTextFilter() {
        this.filterInput.domElement.addEventListener("keyup", (e) => {
            if ((e.key == "Escape") || (e.key == "Enter")) {
                this.filterInput.domElement.blur()
            }
        });
        this.filterInput.domElement.oninput = (e) => {
            this.dispatch("filter-changed", this.filterInput.domElement.value)
        }
    }

    initTagFilter() {
        this.tagFilterButton.on("click", async () => {
            let tags = Object.values(await this.library.tags.getAllObjects()).map((x) => {
                return {
                    id: x._id,
                    name: x.name,
                    checked: (this.filterTags[x._id] != undefined) 
                }
            })
            if (!this.tagFilterPicker) {
                this.tagFilterPicker = new TagFilterPicker(document.getElementsByTagName("body")[0], {
                    filterUnplayed: this.filterUnplayed,
                    tags: tags, 
                    cancel: () => {
                        this.tagFilterPicker = undefined
                    },
                    updateFilter: async (tags) => {
                        this.tagFilterPicker = undefined
                        this.filterUnplayed = tags.filterUnplayed
                        this.filterTags = tags.filterTags
                        this.dispatch("tag-filter-changed", tags)
                    }                    
                })
                this.tagFilterPicker.open(this.tagFilterButton.domElement)    
            } else {
                this.tagFilterPicker.close()
                this.tagFilterPicker = undefined
            }
        })

    }

    setMetadata(metadata) {
        this.listNameLabel.setText(metadata.name)
        this.listStatLabel.setText(`${metadata.numTracks} tracks - ${format_seconds_long(metadata.duration / 1000)}`)
    }

    setResultCount(n) {
        if (n == undefined) {
            this.filterResultCount.setText("")
        } else if (n == 0) {
            this.filterResultCount.setText("No results")
        } else if (n == 1) {
            this.filterResultCount.setText(`1 result`)            
        } else {
            this.filterResultCount.setText(`${n} results`)            
        }
    }
}

module.exports = {
    ListInfoHeader: ListInfoHeader
}